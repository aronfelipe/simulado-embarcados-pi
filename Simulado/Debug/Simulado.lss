
Simulado.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e20  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00402e20  00402e20  00012e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000044c  20400000  00402e28  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000002d0  2040044c  00403274  0002044c  2**2
                  ALLOC
  4 .stack        00002004  2040071c  00403544  0002044c  2**0
                  ALLOC
  5 .heap         00000200  20402720  00405548  0002044c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002044c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002047a  2**0
                  CONTENTS, READONLY
  8 .debug_info   00019b30  00000000  00000000  000204d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003905  00000000  00000000  0003a003  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000668a  00000000  00000000  0003d908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a08  00000000  00000000  00043f92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a70  00000000  00000000  0004499a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00021bc2  00000000  00000000  0004540a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000fa26  00000000  00000000  00066fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000904e3  00000000  00000000  000769f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000018c4  00000000  00000000  00106ed8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	20 27 40 20 7d 13 40 00 79 13 40 00 79 13 40 00      '@ }.@.y.@.y.@.
  400010:	79 13 40 00 79 13 40 00 79 13 40 00 00 00 00 00     y.@.y.@.y.@.....
	...
  40002c:	79 13 40 00 79 13 40 00 00 00 00 00 79 13 40 00     y.@.y.@.....y.@.
  40003c:	79 13 40 00 79 13 40 00 79 13 40 00 dd 16 40 00     y.@.y.@.y.@...@.
  40004c:	b9 16 40 00 79 13 40 00 79 13 40 00 79 13 40 00     ..@.y.@.y.@.y.@.
  40005c:	79 13 40 00 79 13 40 00 00 00 00 00 a1 11 40 00     y.@.y.@.......@.
  40006c:	b5 11 40 00 c9 11 40 00 79 13 40 00 79 13 40 00     ..@...@.y.@.y.@.
  40007c:	79 13 40 00 dd 11 40 00 f1 11 40 00 79 13 40 00     y.@...@...@.y.@.
  40008c:	79 13 40 00 79 13 40 00 79 13 40 00 79 13 40 00     y.@.y.@.y.@.y.@.
  40009c:	41 16 40 00 79 13 40 00 79 13 40 00 69 16 40 00     A.@.y.@.y.@.i.@.
  4000ac:	79 13 40 00 79 13 40 00 79 13 40 00 79 13 40 00     y.@.y.@.y.@.y.@.
  4000bc:	79 13 40 00 79 13 40 00 79 13 40 00 79 13 40 00     y.@.y.@.y.@.y.@.
  4000cc:	79 13 40 00 00 00 00 00 79 13 40 00 00 00 00 00     y.@.....y.@.....
  4000dc:	79 13 40 00 79 13 40 00 79 13 40 00 79 13 40 00     y.@.y.@.y.@.y.@.
  4000ec:	79 13 40 00 79 13 40 00 79 13 40 00 79 13 40 00     y.@.y.@.y.@.y.@.
  4000fc:	91 16 40 00 79 13 40 00 79 13 40 00 79 13 40 00     ..@.y.@.y.@.y.@.
  40010c:	79 13 40 00 79 13 40 00 00 00 00 00 00 00 00 00     y.@.y.@.........
  40011c:	00 00 00 00 79 13 40 00 79 13 40 00 79 13 40 00     ....y.@.y.@.y.@.
  40012c:	79 13 40 00 79 13 40 00 00 00 00 00 79 13 40 00     y.@.y.@.....y.@.
  40013c:	79 13 40 00                                         y.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040044c 	.word	0x2040044c
  40015c:	00000000 	.word	0x00000000
  400160:	00402e28 	.word	0x00402e28

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00402e28 	.word	0x00402e28
  4001a0:	20400450 	.word	0x20400450
  4001a4:	00402e28 	.word	0x00402e28
  4001a8:	00000000 	.word	0x00000000

004001ac <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  4001ac:	b921      	cbnz	r1, 4001b8 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4001ae:	6843      	ldr	r3, [r0, #4]
  4001b0:	f023 0301 	bic.w	r3, r3, #1
  4001b4:	6043      	str	r3, [r0, #4]
  4001b6:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  4001b8:	6843      	ldr	r3, [r0, #4]
  4001ba:	f043 0301 	orr.w	r3, r3, #1
  4001be:	6043      	str	r3, [r0, #4]
  4001c0:	4770      	bx	lr

004001c2 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  4001c2:	6201      	str	r1, [r0, #32]
  4001c4:	4770      	bx	lr
	...

004001c8 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  4001c8:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  4001ca:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  4001cc:	f014 0f01 	tst.w	r4, #1
  4001d0:	d005      	beq.n	4001de <rtc_set_time+0x16>
  4001d2:	290c      	cmp	r1, #12
  4001d4:	d903      	bls.n	4001de <rtc_set_time+0x16>
			ul_hour -= 12;
  4001d6:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  4001d8:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  4001dc:	e000      	b.n	4001e0 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  4001de:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4001e0:	4c1c      	ldr	r4, [pc, #112]	; (400254 <rtc_set_time+0x8c>)
  4001e2:	fba4 5603 	umull	r5, r6, r4, r3
  4001e6:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  4001e8:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  4001ec:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  4001f0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4001f4:	fba4 6502 	umull	r6, r5, r4, r2
  4001f8:	08ed      	lsrs	r5, r5, #3
  4001fa:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  4001fe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  400202:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  400206:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  40020a:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  40020c:	fba4 4201 	umull	r4, r2, r4, r1
  400210:	08d2      	lsrs	r2, r2, #3
  400212:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  400216:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40021a:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  40021e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  400222:	6983      	ldr	r3, [r0, #24]
  400224:	f013 0f04 	tst.w	r3, #4
  400228:	d0fb      	beq.n	400222 <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  40022a:	6803      	ldr	r3, [r0, #0]
  40022c:	f043 0301 	orr.w	r3, r3, #1
  400230:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  400232:	6983      	ldr	r3, [r0, #24]
  400234:	f013 0f01 	tst.w	r3, #1
  400238:	d0fb      	beq.n	400232 <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  40023a:	2301      	movs	r3, #1
  40023c:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  40023e:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400240:	6803      	ldr	r3, [r0, #0]
  400242:	f023 0301 	bic.w	r3, r3, #1
  400246:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  400248:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  40024a:	f000 0001 	and.w	r0, r0, #1
  40024e:	bcf0      	pop	{r4, r5, r6, r7}
  400250:	4770      	bx	lr
  400252:	bf00      	nop
  400254:	cccccccd 	.word	0xcccccccd

00400258 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  400258:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40025a:	4d2a      	ldr	r5, [pc, #168]	; (400304 <rtc_set_date+0xac>)
  40025c:	fba5 4603 	umull	r4, r6, r5, r3
  400260:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  400262:	9c03      	ldr	r4, [sp, #12]
  400264:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400266:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  40026a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40026e:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400272:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400276:	fba5 6402 	umull	r6, r4, r5, r2
  40027a:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40027c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  400280:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400284:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400288:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  40028c:	4b1e      	ldr	r3, [pc, #120]	; (400308 <rtc_set_date+0xb0>)
  40028e:	fba3 4301 	umull	r4, r3, r3, r1
  400292:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400294:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  400298:	4b1c      	ldr	r3, [pc, #112]	; (40030c <rtc_set_date+0xb4>)
  40029a:	fba3 4301 	umull	r4, r3, r3, r1
  40029e:	095b      	lsrs	r3, r3, #5
  4002a0:	fba5 6403 	umull	r6, r4, r5, r3
  4002a4:	08e4      	lsrs	r4, r4, #3
  4002a6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4002aa:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002ae:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  4002b0:	fba5 4301 	umull	r4, r3, r5, r1
  4002b4:	08db      	lsrs	r3, r3, #3
  4002b6:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  4002ba:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  4002c2:	fba5 1503 	umull	r1, r5, r5, r3
  4002c6:	08ed      	lsrs	r5, r5, #3
  4002c8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4002cc:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4002d0:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  4002d4:	6983      	ldr	r3, [r0, #24]
  4002d6:	f013 0f04 	tst.w	r3, #4
  4002da:	d0fb      	beq.n	4002d4 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  4002dc:	6803      	ldr	r3, [r0, #0]
  4002de:	f043 0302 	orr.w	r3, r3, #2
  4002e2:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4002e4:	6983      	ldr	r3, [r0, #24]
  4002e6:	f013 0f01 	tst.w	r3, #1
  4002ea:	d0fb      	beq.n	4002e4 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4002ec:	2301      	movs	r3, #1
  4002ee:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  4002f0:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  4002f2:	6803      	ldr	r3, [r0, #0]
  4002f4:	f023 0302 	bic.w	r3, r3, #2
  4002f8:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  4002fa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4002fc:	f000 0002 	and.w	r0, r0, #2
  400300:	bc70      	pop	{r4, r5, r6}
  400302:	4770      	bx	lr
  400304:	cccccccd 	.word	0xcccccccd
  400308:	10624dd3 	.word	0x10624dd3
  40030c:	51eb851f 	.word	0x51eb851f

00400310 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  400310:	6980      	ldr	r0, [r0, #24]
}
  400312:	4770      	bx	lr

00400314 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  400314:	61c1      	str	r1, [r0, #28]
  400316:	4770      	bx	lr

00400318 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  400318:	4b03      	ldr	r3, [pc, #12]	; (400328 <rtt_init+0x10>)
  40031a:	681b      	ldr	r3, [r3, #0]
  40031c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  400320:	4319      	orrs	r1, r3
  400322:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  400324:	2000      	movs	r0, #0
  400326:	4770      	bx	lr
  400328:	20400468 	.word	0x20400468

0040032c <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  40032c:	b941      	cbnz	r1, 400340 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  40032e:	4a09      	ldr	r2, [pc, #36]	; (400354 <rtt_sel_source+0x28>)
  400330:	6813      	ldr	r3, [r2, #0]
  400332:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  400336:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  400338:	6802      	ldr	r2, [r0, #0]
  40033a:	4313      	orrs	r3, r2
  40033c:	6003      	str	r3, [r0, #0]
  40033e:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  400340:	4a04      	ldr	r2, [pc, #16]	; (400354 <rtt_sel_source+0x28>)
  400342:	6813      	ldr	r3, [r2, #0]
  400344:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  400348:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  40034a:	6802      	ldr	r2, [r0, #0]
  40034c:	4313      	orrs	r3, r2
  40034e:	6003      	str	r3, [r0, #0]
  400350:	4770      	bx	lr
  400352:	bf00      	nop
  400354:	20400468 	.word	0x20400468

00400358 <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  400358:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  40035a:	4b03      	ldr	r3, [pc, #12]	; (400368 <rtt_enable_interrupt+0x10>)
  40035c:	681b      	ldr	r3, [r3, #0]
  40035e:	4319      	orrs	r1, r3
  400360:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  400362:	6001      	str	r1, [r0, #0]
  400364:	4770      	bx	lr
  400366:	bf00      	nop
  400368:	20400468 	.word	0x20400468

0040036c <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  40036c:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  40036e:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400372:	4b02      	ldr	r3, [pc, #8]	; (40037c <rtt_disable_interrupt+0x10>)
  400374:	681b      	ldr	r3, [r3, #0]
  400376:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  400378:	6001      	str	r1, [r0, #0]
  40037a:	4770      	bx	lr
  40037c:	20400468 	.word	0x20400468

00400380 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  400380:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  400382:	6883      	ldr	r3, [r0, #8]
  400384:	429a      	cmp	r2, r3
  400386:	d003      	beq.n	400390 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  400388:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  40038a:	6883      	ldr	r3, [r0, #8]
  40038c:	4293      	cmp	r3, r2
  40038e:	d1fb      	bne.n	400388 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  400390:	4618      	mov	r0, r3
  400392:	4770      	bx	lr

00400394 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  400394:	68c0      	ldr	r0, [r0, #12]
}
  400396:	4770      	bx	lr

00400398 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  400398:	b570      	push	{r4, r5, r6, lr}
  40039a:	4606      	mov	r6, r0
  40039c:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  40039e:	6804      	ldr	r4, [r0, #0]
  4003a0:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  4003a4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4003a8:	4809      	ldr	r0, [pc, #36]	; (4003d0 <rtt_write_alarm_time+0x38>)
  4003aa:	4b0a      	ldr	r3, [pc, #40]	; (4003d4 <rtt_write_alarm_time+0x3c>)
  4003ac:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  4003ae:	b92d      	cbnz	r5, 4003bc <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  4003b0:	f04f 33ff 	mov.w	r3, #4294967295
  4003b4:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  4003b6:	b924      	cbnz	r4, 4003c2 <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  4003b8:	2000      	movs	r0, #0
  4003ba:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  4003bc:	3d01      	subs	r5, #1
  4003be:	6075      	str	r5, [r6, #4]
  4003c0:	e7f9      	b.n	4003b6 <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  4003c2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4003c6:	4802      	ldr	r0, [pc, #8]	; (4003d0 <rtt_write_alarm_time+0x38>)
  4003c8:	4b03      	ldr	r3, [pc, #12]	; (4003d8 <rtt_write_alarm_time+0x40>)
  4003ca:	4798      	blx	r3
  4003cc:	e7f4      	b.n	4003b8 <rtt_write_alarm_time+0x20>
  4003ce:	bf00      	nop
  4003d0:	400e1830 	.word	0x400e1830
  4003d4:	0040036d 	.word	0x0040036d
  4003d8:	00400359 	.word	0x00400359

004003dc <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4003dc:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4003de:	4b07      	ldr	r3, [pc, #28]	; (4003fc <spi_enable_clock+0x20>)
  4003e0:	4298      	cmp	r0, r3
  4003e2:	d003      	beq.n	4003ec <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4003e4:	4b06      	ldr	r3, [pc, #24]	; (400400 <spi_enable_clock+0x24>)
  4003e6:	4298      	cmp	r0, r3
  4003e8:	d004      	beq.n	4003f4 <spi_enable_clock+0x18>
  4003ea:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4003ec:	2015      	movs	r0, #21
  4003ee:	4b05      	ldr	r3, [pc, #20]	; (400404 <spi_enable_clock+0x28>)
  4003f0:	4798      	blx	r3
  4003f2:	bd08      	pop	{r3, pc}
  4003f4:	202a      	movs	r0, #42	; 0x2a
  4003f6:	4b03      	ldr	r3, [pc, #12]	; (400404 <spi_enable_clock+0x28>)
  4003f8:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4003fa:	e7f6      	b.n	4003ea <spi_enable_clock+0xe>
  4003fc:	40008000 	.word	0x40008000
  400400:	40058000 	.word	0x40058000
  400404:	00401325 	.word	0x00401325

00400408 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400408:	6843      	ldr	r3, [r0, #4]
  40040a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40040e:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400410:	6843      	ldr	r3, [r0, #4]
  400412:	0409      	lsls	r1, r1, #16
  400414:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400418:	4319      	orrs	r1, r3
  40041a:	6041      	str	r1, [r0, #4]
  40041c:	4770      	bx	lr

0040041e <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  40041e:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400420:	f643 2499 	movw	r4, #15001	; 0x3a99
  400424:	6905      	ldr	r5, [r0, #16]
  400426:	f015 0f02 	tst.w	r5, #2
  40042a:	d103      	bne.n	400434 <spi_write+0x16>
		if (!timeout--) {
  40042c:	3c01      	subs	r4, #1
  40042e:	d1f9      	bne.n	400424 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  400430:	2001      	movs	r0, #1
  400432:	e00c      	b.n	40044e <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400434:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400436:	f014 0f02 	tst.w	r4, #2
  40043a:	d006      	beq.n	40044a <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  40043c:	0412      	lsls	r2, r2, #16
  40043e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400442:	4311      	orrs	r1, r2
		if (uc_last) {
  400444:	b10b      	cbz	r3, 40044a <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400446:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  40044a:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  40044c:	2000      	movs	r0, #0
}
  40044e:	bc30      	pop	{r4, r5}
  400450:	4770      	bx	lr

00400452 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400452:	b932      	cbnz	r2, 400462 <spi_set_clock_polarity+0x10>
  400454:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400458:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40045a:	f023 0301 	bic.w	r3, r3, #1
  40045e:	6303      	str	r3, [r0, #48]	; 0x30
  400460:	4770      	bx	lr
  400462:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400466:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400468:	f043 0301 	orr.w	r3, r3, #1
  40046c:	6303      	str	r3, [r0, #48]	; 0x30
  40046e:	4770      	bx	lr

00400470 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400470:	b932      	cbnz	r2, 400480 <spi_set_clock_phase+0x10>
  400472:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400476:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400478:	f023 0302 	bic.w	r3, r3, #2
  40047c:	6303      	str	r3, [r0, #48]	; 0x30
  40047e:	4770      	bx	lr
  400480:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400484:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400486:	f043 0302 	orr.w	r3, r3, #2
  40048a:	6303      	str	r3, [r0, #48]	; 0x30
  40048c:	4770      	bx	lr

0040048e <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  40048e:	2a04      	cmp	r2, #4
  400490:	d003      	beq.n	40049a <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400492:	b16a      	cbz	r2, 4004b0 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400494:	2a08      	cmp	r2, #8
  400496:	d016      	beq.n	4004c6 <spi_configure_cs_behavior+0x38>
  400498:	4770      	bx	lr
  40049a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40049e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004a0:	f023 0308 	bic.w	r3, r3, #8
  4004a4:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  4004a6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004a8:	f043 0304 	orr.w	r3, r3, #4
  4004ac:	6303      	str	r3, [r0, #48]	; 0x30
  4004ae:	4770      	bx	lr
  4004b0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4004b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004b6:	f023 0308 	bic.w	r3, r3, #8
  4004ba:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  4004bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004be:	f023 0304 	bic.w	r3, r3, #4
  4004c2:	6303      	str	r3, [r0, #48]	; 0x30
  4004c4:	4770      	bx	lr
  4004c6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  4004ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4004cc:	f043 0308 	orr.w	r3, r3, #8
  4004d0:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  4004d2:	e7e1      	b.n	400498 <spi_configure_cs_behavior+0xa>

004004d4 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4004d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4004d8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4004da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4004de:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4004e0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4004e2:	431a      	orrs	r2, r3
  4004e4:	630a      	str	r2, [r1, #48]	; 0x30
  4004e6:	4770      	bx	lr

004004e8 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4004e8:	1e43      	subs	r3, r0, #1
  4004ea:	4419      	add	r1, r3
  4004ec:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4004f0:	1e43      	subs	r3, r0, #1
  4004f2:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4004f4:	bf94      	ite	ls
  4004f6:	b200      	sxthls	r0, r0
		return -1;
  4004f8:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4004fc:	4770      	bx	lr

004004fe <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  4004fe:	b17a      	cbz	r2, 400520 <spi_set_baudrate_div+0x22>
{
  400500:	b410      	push	{r4}
  400502:	4614      	mov	r4, r2
  400504:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  400508:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40050a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  40050e:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400510:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  400512:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  400516:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  400518:	2000      	movs	r0, #0
}
  40051a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40051e:	4770      	bx	lr
        return -1;
  400520:	f04f 30ff 	mov.w	r0, #4294967295
  400524:	4770      	bx	lr

00400526 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400526:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400528:	0189      	lsls	r1, r1, #6
  40052a:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  40052c:	2402      	movs	r4, #2
  40052e:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400530:	f04f 31ff 	mov.w	r1, #4294967295
  400534:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400536:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400538:	605a      	str	r2, [r3, #4]
}
  40053a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40053e:	4770      	bx	lr

00400540 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400540:	0189      	lsls	r1, r1, #6
  400542:	2305      	movs	r3, #5
  400544:	5043      	str	r3, [r0, r1]
  400546:	4770      	bx	lr

00400548 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400548:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  40054c:	61ca      	str	r2, [r1, #28]
  40054e:	4770      	bx	lr

00400550 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400550:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400554:	624a      	str	r2, [r1, #36]	; 0x24
  400556:	4770      	bx	lr

00400558 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400558:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  40055c:	6a08      	ldr	r0, [r1, #32]
}
  40055e:	4770      	bx	lr

00400560 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400560:	b4f0      	push	{r4, r5, r6, r7}
  400562:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400564:	2402      	movs	r4, #2
  400566:	9401      	str	r4, [sp, #4]
  400568:	2408      	movs	r4, #8
  40056a:	9402      	str	r4, [sp, #8]
  40056c:	2420      	movs	r4, #32
  40056e:	9403      	str	r4, [sp, #12]
  400570:	2480      	movs	r4, #128	; 0x80
  400572:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400574:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400576:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400578:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  40057a:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  40057e:	d814      	bhi.n	4005aa <tc_find_mck_divisor+0x4a>
  400580:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400582:	42a0      	cmp	r0, r4
  400584:	d217      	bcs.n	4005b6 <tc_find_mck_divisor+0x56>
  400586:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400588:	af01      	add	r7, sp, #4
  40058a:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  40058e:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400592:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400594:	4284      	cmp	r4, r0
  400596:	d30a      	bcc.n	4005ae <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400598:	4286      	cmp	r6, r0
  40059a:	d90d      	bls.n	4005b8 <tc_find_mck_divisor+0x58>
			ul_index++) {
  40059c:	3501      	adds	r5, #1
	for (ul_index = 0;
  40059e:	2d05      	cmp	r5, #5
  4005a0:	d1f3      	bne.n	40058a <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  4005a2:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  4005a4:	b006      	add	sp, #24
  4005a6:	bcf0      	pop	{r4, r5, r6, r7}
  4005a8:	4770      	bx	lr
			return 0;
  4005aa:	2000      	movs	r0, #0
  4005ac:	e7fa      	b.n	4005a4 <tc_find_mck_divisor+0x44>
  4005ae:	2000      	movs	r0, #0
  4005b0:	e7f8      	b.n	4005a4 <tc_find_mck_divisor+0x44>
	return 1;
  4005b2:	2001      	movs	r0, #1
  4005b4:	e7f6      	b.n	4005a4 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  4005b6:	2500      	movs	r5, #0
	if (p_uldiv) {
  4005b8:	b12a      	cbz	r2, 4005c6 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  4005ba:	a906      	add	r1, sp, #24
  4005bc:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  4005c0:	f851 1c14 	ldr.w	r1, [r1, #-20]
  4005c4:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  4005c6:	2b00      	cmp	r3, #0
  4005c8:	d0f3      	beq.n	4005b2 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  4005ca:	601d      	str	r5, [r3, #0]
	return 1;
  4005cc:	2001      	movs	r0, #1
  4005ce:	e7e9      	b.n	4005a4 <tc_find_mck_divisor+0x44>

004005d0 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  4005d0:	4b01      	ldr	r3, [pc, #4]	; (4005d8 <gfx_mono_set_framebuffer+0x8>)
  4005d2:	6018      	str	r0, [r3, #0]
  4005d4:	4770      	bx	lr
  4005d6:	bf00      	nop
  4005d8:	2040046c 	.word	0x2040046c

004005dc <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  4005dc:	4b02      	ldr	r3, [pc, #8]	; (4005e8 <gfx_mono_framebuffer_put_byte+0xc>)
  4005de:	681b      	ldr	r3, [r3, #0]
  4005e0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  4005e4:	5442      	strb	r2, [r0, r1]
  4005e6:	4770      	bx	lr
  4005e8:	2040046c 	.word	0x2040046c

004005ec <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  4005ec:	4b02      	ldr	r3, [pc, #8]	; (4005f8 <gfx_mono_framebuffer_get_byte+0xc>)
  4005ee:	681b      	ldr	r3, [r3, #0]
  4005f0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  4005f4:	5c40      	ldrb	r0, [r0, r1]
  4005f6:	4770      	bx	lr
  4005f8:	2040046c 	.word	0x2040046c

004005fc <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  4005fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  400600:	1884      	adds	r4, r0, r2
  400602:	2c80      	cmp	r4, #128	; 0x80
  400604:	dd02      	ble.n	40060c <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  400606:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  40060a:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  40060c:	b322      	cbz	r2, 400658 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  40060e:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  400610:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  400614:	2601      	movs	r6, #1
  400616:	fa06 f101 	lsl.w	r1, r6, r1
  40061a:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  40061c:	2b01      	cmp	r3, #1
  40061e:	d01d      	beq.n	40065c <gfx_mono_generic_draw_horizontal_line+0x60>
  400620:	2b00      	cmp	r3, #0
  400622:	d035      	beq.n	400690 <gfx_mono_generic_draw_horizontal_line+0x94>
  400624:	2b02      	cmp	r3, #2
  400626:	d117      	bne.n	400658 <gfx_mono_generic_draw_horizontal_line+0x5c>
  400628:	3801      	subs	r0, #1
  40062a:	b2c7      	uxtb	r7, r0
  40062c:	19d4      	adds	r4, r2, r7
  40062e:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  400630:	f8df a090 	ldr.w	sl, [pc, #144]	; 4006c4 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  400634:	f04f 0900 	mov.w	r9, #0
  400638:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4006c8 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  40063c:	4621      	mov	r1, r4
  40063e:	4628      	mov	r0, r5
  400640:	47d0      	blx	sl
			temp ^= pixelmask;
  400642:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400646:	464b      	mov	r3, r9
  400648:	b2d2      	uxtb	r2, r2
  40064a:	4621      	mov	r1, r4
  40064c:	4628      	mov	r0, r5
  40064e:	47c0      	blx	r8
  400650:	3c01      	subs	r4, #1
  400652:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400654:	42bc      	cmp	r4, r7
  400656:	d1f1      	bne.n	40063c <gfx_mono_generic_draw_horizontal_line+0x40>
  400658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40065c:	3801      	subs	r0, #1
  40065e:	b2c7      	uxtb	r7, r0
  400660:	19d4      	adds	r4, r2, r7
  400662:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400664:	f8df a05c 	ldr.w	sl, [pc, #92]	; 4006c4 <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  400668:	f04f 0900 	mov.w	r9, #0
  40066c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4006c8 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400670:	4621      	mov	r1, r4
  400672:	4628      	mov	r0, r5
  400674:	47d0      	blx	sl
			temp |= pixelmask;
  400676:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40067a:	464b      	mov	r3, r9
  40067c:	b2d2      	uxtb	r2, r2
  40067e:	4621      	mov	r1, r4
  400680:	4628      	mov	r0, r5
  400682:	47c0      	blx	r8
  400684:	3c01      	subs	r4, #1
  400686:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400688:	42bc      	cmp	r4, r7
  40068a:	d1f1      	bne.n	400670 <gfx_mono_generic_draw_horizontal_line+0x74>
  40068c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400690:	3801      	subs	r0, #1
  400692:	b2c7      	uxtb	r7, r0
  400694:	19d4      	adds	r4, r2, r7
  400696:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400698:	f8df 8028 	ldr.w	r8, [pc, #40]	; 4006c4 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  40069c:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  40069e:	f8df 9028 	ldr.w	r9, [pc, #40]	; 4006c8 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4006a2:	4621      	mov	r1, r4
  4006a4:	4628      	mov	r0, r5
  4006a6:	47c0      	blx	r8
			temp &= ~pixelmask;
  4006a8:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  4006ac:	2300      	movs	r3, #0
  4006ae:	b2d2      	uxtb	r2, r2
  4006b0:	4621      	mov	r1, r4
  4006b2:	4628      	mov	r0, r5
  4006b4:	47c8      	blx	r9
  4006b6:	3c01      	subs	r4, #1
  4006b8:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4006ba:	42bc      	cmp	r4, r7
  4006bc:	d1f1      	bne.n	4006a2 <gfx_mono_generic_draw_horizontal_line+0xa6>
  4006be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4006c2:	bf00      	nop
  4006c4:	00400ab9 	.word	0x00400ab9
  4006c8:	004009b5 	.word	0x004009b5

004006cc <gfx_mono_generic_draw_vertical_line>:
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
	if (length == 0) {
  4006cc:	2a00      	cmp	r2, #0
  4006ce:	d048      	beq.n	400762 <gfx_mono_generic_draw_vertical_line+0x96>
{
  4006d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4006d4:	4614      	mov	r4, r2
  4006d6:	461f      	mov	r7, r3
  4006d8:	4606      	mov	r6, r0
		return;
	}

	gfx_coord_t y2 = y + length - 1;
  4006da:	1e4a      	subs	r2, r1, #1
  4006dc:	4422      	add	r2, r4
  4006de:	b2d2      	uxtb	r2, r2

	if (y == y2) {
  4006e0:	4291      	cmp	r1, r2
  4006e2:	d031      	beq.n	400748 <gfx_mono_generic_draw_vertical_line+0x7c>
  4006e4:	2a1f      	cmp	r2, #31
  4006e6:	bf28      	it	cs
  4006e8:	221f      	movcs	r2, #31
  4006ea:	4615      	mov	r5, r2

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
		y2 = GFX_MONO_LCD_HEIGHT - 1;
	}

	gfx_coord_t y1page = y / 8;
  4006ec:	08cc      	lsrs	r4, r1, #3
	gfx_coord_t y2page = y2 / 8;
  4006ee:	ea4f 08d2 	mov.w	r8, r2, lsr #3

	uint8_t y1bitpos = y & 0x07;
	uint8_t y2bitpos = y2 & 0x07;

	uint8_t y1pixelmask = 0xFF << y1bitpos;
  4006f2:	f001 0207 	and.w	r2, r1, #7
  4006f6:	23ff      	movs	r3, #255	; 0xff
  4006f8:	fa03 f202 	lsl.w	r2, r3, r2
  4006fc:	b2d2      	uxtb	r2, r2
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
  4006fe:	f005 0507 	and.w	r5, r5, #7
  400702:	f1c5 0507 	rsb	r5, r5, #7
  400706:	fa43 f505 	asr.w	r5, r3, r5
  40070a:	b2ed      	uxtb	r5, r5

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
  40070c:	4544      	cmp	r4, r8
  40070e:	d020      	beq.n	400752 <gfx_mono_generic_draw_vertical_line+0x86>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
  400710:	463b      	mov	r3, r7
  400712:	4601      	mov	r1, r0
  400714:	4620      	mov	r0, r4
  400716:	f8df 904c 	ldr.w	r9, [pc, #76]	; 400764 <gfx_mono_generic_draw_vertical_line+0x98>
  40071a:	47c8      	blx	r9

		while (++y1page < y2page) {
  40071c:	3401      	adds	r4, #1
  40071e:	45a0      	cmp	r8, r4
  400720:	d90a      	bls.n	400738 <gfx_mono_generic_draw_vertical_line+0x6c>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
  400722:	f04f 0aff 	mov.w	sl, #255	; 0xff
  400726:	463b      	mov	r3, r7
  400728:	4652      	mov	r2, sl
  40072a:	4631      	mov	r1, r6
  40072c:	4620      	mov	r0, r4
  40072e:	47c8      	blx	r9
		while (++y1page < y2page) {
  400730:	3401      	adds	r4, #1
  400732:	b2e4      	uxtb	r4, r4
  400734:	45a0      	cmp	r8, r4
  400736:	d8f6      	bhi.n	400726 <gfx_mono_generic_draw_vertical_line+0x5a>
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
  400738:	463b      	mov	r3, r7
  40073a:	462a      	mov	r2, r5
  40073c:	4631      	mov	r1, r6
  40073e:	4640      	mov	r0, r8
  400740:	4c08      	ldr	r4, [pc, #32]	; (400764 <gfx_mono_generic_draw_vertical_line+0x98>)
  400742:	47a0      	blx	r4
  400744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		gfx_mono_draw_pixel(x, y, color);
  400748:	461a      	mov	r2, r3
  40074a:	4b07      	ldr	r3, [pc, #28]	; (400768 <gfx_mono_generic_draw_vertical_line+0x9c>)
  40074c:	4798      	blx	r3
		return;
  40074e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
  400752:	463b      	mov	r3, r7
  400754:	402a      	ands	r2, r5
  400756:	4601      	mov	r1, r0
  400758:	4620      	mov	r0, r4
  40075a:	4c02      	ldr	r4, [pc, #8]	; (400764 <gfx_mono_generic_draw_vertical_line+0x98>)
  40075c:	47a0      	blx	r4
  40075e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400762:	4770      	bx	lr
  400764:	00400ac5 	.word	0x00400ac5
  400768:	00400a55 	.word	0x00400a55

0040076c <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  40076c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400770:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  400774:	b18b      	cbz	r3, 40079a <gfx_mono_generic_draw_filled_rect+0x2e>
  400776:	461c      	mov	r4, r3
  400778:	4690      	mov	r8, r2
  40077a:	4606      	mov	r6, r0
  40077c:	1e4d      	subs	r5, r1, #1
  40077e:	b2ed      	uxtb	r5, r5
  400780:	442c      	add	r4, r5
  400782:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  400784:	f8df 9018 	ldr.w	r9, [pc, #24]	; 4007a0 <gfx_mono_generic_draw_filled_rect+0x34>
  400788:	463b      	mov	r3, r7
  40078a:	4642      	mov	r2, r8
  40078c:	4621      	mov	r1, r4
  40078e:	4630      	mov	r0, r6
  400790:	47c8      	blx	r9
  400792:	3c01      	subs	r4, #1
  400794:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  400796:	42ac      	cmp	r4, r5
  400798:	d1f6      	bne.n	400788 <gfx_mono_generic_draw_filled_rect+0x1c>
  40079a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40079e:	bf00      	nop
  4007a0:	004005fd 	.word	0x004005fd

004007a4 <gfx_mono_generic_draw_filled_circle>:
 * \param[in]  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
  4007a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4007a8:	b085      	sub	sp, #20
  4007aa:	4681      	mov	r9, r0
  4007ac:	9100      	str	r1, [sp, #0]
  4007ae:	9301      	str	r3, [sp, #4]
  4007b0:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
  4007b4:	b17a      	cbz	r2, 4007d6 <gfx_mono_generic_draw_filled_circle+0x32>
  4007b6:	4616      	mov	r6, r2
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
  4007b8:	0055      	lsls	r5, r2, #1
  4007ba:	f1c5 0503 	rsb	r5, r5, #3
  4007be:	2701      	movs	r7, #1
  4007c0:	f04f 0800 	mov.w	r8, #0

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
  4007c4:	f00b 0303 	and.w	r3, fp, #3
  4007c8:	9302      	str	r3, [sp, #8]
			gfx_mono_draw_vertical_line(x + offset_y,
  4007ca:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 4008bc <gfx_mono_generic_draw_filled_circle+0x118>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
  4007ce:	f00b 030c 	and.w	r3, fp, #12
  4007d2:	9303      	str	r3, [sp, #12]
  4007d4:	e04d      	b.n	400872 <gfx_mono_generic_draw_filled_circle+0xce>
		gfx_mono_draw_pixel(x, y, color);
  4007d6:	461a      	mov	r2, r3
  4007d8:	4b37      	ldr	r3, [pc, #220]	; (4008b8 <gfx_mono_generic_draw_filled_circle+0x114>)
  4007da:	4798      	blx	r3
		}

		/* Next X. */
		++offset_x;
	}
}
  4007dc:	b005      	add	sp, #20
  4007de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			gfx_mono_draw_vertical_line(x + offset_y,
  4007e2:	9b00      	ldr	r3, [sp, #0]
  4007e4:	1b19      	subs	r1, r3, r4
  4007e6:	eb09 0006 	add.w	r0, r9, r6
  4007ea:	9b01      	ldr	r3, [sp, #4]
  4007ec:	463a      	mov	r2, r7
  4007ee:	b2c9      	uxtb	r1, r1
  4007f0:	b2c0      	uxtb	r0, r0
  4007f2:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x + offset_x,
  4007f4:	1c72      	adds	r2, r6, #1
  4007f6:	9900      	ldr	r1, [sp, #0]
  4007f8:	1b89      	subs	r1, r1, r6
  4007fa:	eb09 0004 	add.w	r0, r9, r4
  4007fe:	9b01      	ldr	r3, [sp, #4]
  400800:	b2d2      	uxtb	r2, r2
  400802:	b2c9      	uxtb	r1, r1
  400804:	b2c0      	uxtb	r0, r0
  400806:	47d0      	blx	sl
  400808:	e038      	b.n	40087c <gfx_mono_generic_draw_filled_circle+0xd8>
			gfx_mono_draw_vertical_line(x - offset_y,
  40080a:	9b00      	ldr	r3, [sp, #0]
  40080c:	1b19      	subs	r1, r3, r4
  40080e:	eba9 0006 	sub.w	r0, r9, r6
  400812:	9b01      	ldr	r3, [sp, #4]
  400814:	463a      	mov	r2, r7
  400816:	b2c9      	uxtb	r1, r1
  400818:	b2c0      	uxtb	r0, r0
  40081a:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x - offset_x,
  40081c:	1c72      	adds	r2, r6, #1
  40081e:	9900      	ldr	r1, [sp, #0]
  400820:	1b89      	subs	r1, r1, r6
  400822:	eba9 0004 	sub.w	r0, r9, r4
  400826:	9b01      	ldr	r3, [sp, #4]
  400828:	b2d2      	uxtb	r2, r2
  40082a:	b2c9      	uxtb	r1, r1
  40082c:	b2c0      	uxtb	r0, r0
  40082e:	47d0      	blx	sl
  400830:	e027      	b.n	400882 <gfx_mono_generic_draw_filled_circle+0xde>
			gfx_mono_draw_vertical_line(x - offset_y,
  400832:	eba9 0006 	sub.w	r0, r9, r6
  400836:	9b01      	ldr	r3, [sp, #4]
  400838:	463a      	mov	r2, r7
  40083a:	9900      	ldr	r1, [sp, #0]
  40083c:	b2c0      	uxtb	r0, r0
  40083e:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x - offset_x,
  400840:	1c72      	adds	r2, r6, #1
  400842:	eba9 0004 	sub.w	r0, r9, r4
  400846:	9b01      	ldr	r3, [sp, #4]
  400848:	b2d2      	uxtb	r2, r2
  40084a:	9900      	ldr	r1, [sp, #0]
  40084c:	b2c0      	uxtb	r0, r0
  40084e:	47d0      	blx	sl
  400850:	e01a      	b.n	400888 <gfx_mono_generic_draw_filled_circle+0xe4>
		if (error < 0) {
  400852:	2d00      	cmp	r5, #0
  400854:	db2b      	blt.n	4008ae <gfx_mono_generic_draw_filled_circle+0x10a>
			error += (((offset_x - offset_y) << 2) + 10);
  400856:	1ba4      	subs	r4, r4, r6
  400858:	350a      	adds	r5, #10
  40085a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
  40085e:	b225      	sxth	r5, r4
			--offset_y;
  400860:	3e01      	subs	r6, #1
  400862:	b2f6      	uxtb	r6, r6
  400864:	f108 0801 	add.w	r8, r8, #1
  400868:	1c7b      	adds	r3, r7, #1
  40086a:	b2db      	uxtb	r3, r3
	while (offset_x <= offset_y) {
  40086c:	42be      	cmp	r6, r7
  40086e:	d3b5      	bcc.n	4007dc <gfx_mono_generic_draw_filled_circle+0x38>
  400870:	461f      	mov	r7, r3
  400872:	fa5f f488 	uxtb.w	r4, r8
		if (quadrant_mask & GFX_QUADRANT0) {
  400876:	9b02      	ldr	r3, [sp, #8]
  400878:	2b00      	cmp	r3, #0
  40087a:	d1b2      	bne.n	4007e2 <gfx_mono_generic_draw_filled_circle+0x3e>
		if (quadrant_mask & GFX_QUADRANT1) {
  40087c:	9b03      	ldr	r3, [sp, #12]
  40087e:	2b00      	cmp	r3, #0
  400880:	d1c3      	bne.n	40080a <gfx_mono_generic_draw_filled_circle+0x66>
		if (quadrant_mask & GFX_QUADRANT2) {
  400882:	f01b 0f30 	tst.w	fp, #48	; 0x30
  400886:	d1d4      	bne.n	400832 <gfx_mono_generic_draw_filled_circle+0x8e>
		if (quadrant_mask & GFX_QUADRANT3) {
  400888:	f01b 0fc0 	tst.w	fp, #192	; 0xc0
  40088c:	d0e1      	beq.n	400852 <gfx_mono_generic_draw_filled_circle+0xae>
			gfx_mono_draw_vertical_line(x + offset_y,
  40088e:	eb09 0006 	add.w	r0, r9, r6
  400892:	9b01      	ldr	r3, [sp, #4]
  400894:	463a      	mov	r2, r7
  400896:	9900      	ldr	r1, [sp, #0]
  400898:	b2c0      	uxtb	r0, r0
  40089a:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x + offset_x,
  40089c:	1c72      	adds	r2, r6, #1
  40089e:	eb09 0004 	add.w	r0, r9, r4
  4008a2:	9b01      	ldr	r3, [sp, #4]
  4008a4:	b2d2      	uxtb	r2, r2
  4008a6:	9900      	ldr	r1, [sp, #0]
  4008a8:	b2c0      	uxtb	r0, r0
  4008aa:	47d0      	blx	sl
  4008ac:	e7d1      	b.n	400852 <gfx_mono_generic_draw_filled_circle+0xae>
			error += ((offset_x << 2) + 6);
  4008ae:	3506      	adds	r5, #6
  4008b0:	eb05 0584 	add.w	r5, r5, r4, lsl #2
  4008b4:	b22d      	sxth	r5, r5
  4008b6:	e7d5      	b.n	400864 <gfx_mono_generic_draw_filled_circle+0xc0>
  4008b8:	00400a55 	.word	0x00400a55
  4008bc:	004006cd 	.word	0x004006cd

004008c0 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  4008c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4008c4:	b083      	sub	sp, #12
  4008c6:	4604      	mov	r4, r0
  4008c8:	4688      	mov	r8, r1
  4008ca:	4691      	mov	r9, r2
  4008cc:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  4008ce:	7a5b      	ldrb	r3, [r3, #9]
  4008d0:	f89b 2008 	ldrb.w	r2, [fp, #8]
  4008d4:	2100      	movs	r1, #0
  4008d6:	9100      	str	r1, [sp, #0]
  4008d8:	4649      	mov	r1, r9
  4008da:	4640      	mov	r0, r8
  4008dc:	4d21      	ldr	r5, [pc, #132]	; (400964 <gfx_mono_draw_char+0xa4>)
  4008de:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  4008e0:	f89b 3000 	ldrb.w	r3, [fp]
  4008e4:	b113      	cbz	r3, 4008ec <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  4008e6:	b003      	add	sp, #12
  4008e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  4008ec:	f89b 2008 	ldrb.w	r2, [fp, #8]
  4008f0:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  4008f2:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  4008f6:	bf18      	it	ne
  4008f8:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  4008fa:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  4008fe:	f89b 700a 	ldrb.w	r7, [fp, #10]
  400902:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  400904:	fb17 f70a 	smulbb	r7, r7, sl
  400908:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  40090c:	f8db 3004 	ldr.w	r3, [fp, #4]
  400910:	fa13 f787 	uxtah	r7, r3, r7
  400914:	e01f      	b.n	400956 <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  400916:	0064      	lsls	r4, r4, #1
  400918:	b2e4      	uxtb	r4, r4
  40091a:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  40091c:	b2eb      	uxtb	r3, r5
  40091e:	429e      	cmp	r6, r3
  400920:	d910      	bls.n	400944 <gfx_mono_draw_char+0x84>
  400922:	b2eb      	uxtb	r3, r5
  400924:	eb08 0003 	add.w	r0, r8, r3
  400928:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  40092a:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  40092e:	bf08      	it	eq
  400930:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  400934:	f014 0f80 	tst.w	r4, #128	; 0x80
  400938:	d0ed      	beq.n	400916 <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  40093a:	2201      	movs	r2, #1
  40093c:	4649      	mov	r1, r9
  40093e:	4b0a      	ldr	r3, [pc, #40]	; (400968 <gfx_mono_draw_char+0xa8>)
  400940:	4798      	blx	r3
  400942:	e7e8      	b.n	400916 <gfx_mono_draw_char+0x56>
		inc_y += 1;
  400944:	f109 0901 	add.w	r9, r9, #1
  400948:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  40094c:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  400950:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  400954:	d0c7      	beq.n	4008e6 <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  400956:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  40095a:	2e00      	cmp	r6, #0
  40095c:	d0f2      	beq.n	400944 <gfx_mono_draw_char+0x84>
  40095e:	2500      	movs	r5, #0
  400960:	462c      	mov	r4, r5
  400962:	e7de      	b.n	400922 <gfx_mono_draw_char+0x62>
  400964:	0040076d 	.word	0x0040076d
  400968:	00400a55 	.word	0x00400a55

0040096c <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  40096c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400970:	4604      	mov	r4, r0
  400972:	4690      	mov	r8, r2
  400974:	461d      	mov	r5, r3
  400976:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  400978:	4f0d      	ldr	r7, [pc, #52]	; (4009b0 <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  40097a:	460e      	mov	r6, r1
  40097c:	e008      	b.n	400990 <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  40097e:	7a6a      	ldrb	r2, [r5, #9]
  400980:	3201      	adds	r2, #1
  400982:	4442      	add	r2, r8
  400984:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  400988:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  40098a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40098e:	b16b      	cbz	r3, 4009ac <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  400990:	7820      	ldrb	r0, [r4, #0]
  400992:	280a      	cmp	r0, #10
  400994:	d0f3      	beq.n	40097e <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  400996:	280d      	cmp	r0, #13
  400998:	d0f7      	beq.n	40098a <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  40099a:	462b      	mov	r3, r5
  40099c:	4642      	mov	r2, r8
  40099e:	4649      	mov	r1, r9
  4009a0:	47b8      	blx	r7
			x += font->width;
  4009a2:	7a2b      	ldrb	r3, [r5, #8]
  4009a4:	4499      	add	r9, r3
  4009a6:	fa5f f989 	uxtb.w	r9, r9
  4009aa:	e7ee      	b.n	40098a <gfx_mono_draw_string+0x1e>
}
  4009ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4009b0:	004008c1 	.word	0x004008c1

004009b4 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  4009b4:	b570      	push	{r4, r5, r6, lr}
  4009b6:	4604      	mov	r4, r0
  4009b8:	460d      	mov	r5, r1
  4009ba:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  4009bc:	b91b      	cbnz	r3, 4009c6 <gfx_mono_ssd1306_put_byte+0x12>
  4009be:	4b0d      	ldr	r3, [pc, #52]	; (4009f4 <gfx_mono_ssd1306_put_byte+0x40>)
  4009c0:	4798      	blx	r3
  4009c2:	42b0      	cmp	r0, r6
  4009c4:	d015      	beq.n	4009f2 <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  4009c6:	4632      	mov	r2, r6
  4009c8:	4629      	mov	r1, r5
  4009ca:	4620      	mov	r0, r4
  4009cc:	4b0a      	ldr	r3, [pc, #40]	; (4009f8 <gfx_mono_ssd1306_put_byte+0x44>)
  4009ce:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  4009d0:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4009d4:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4009d8:	4c08      	ldr	r4, [pc, #32]	; (4009fc <gfx_mono_ssd1306_put_byte+0x48>)
  4009da:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  4009dc:	f3c5 1002 	ubfx	r0, r5, #4, #3
  4009e0:	f040 0010 	orr.w	r0, r0, #16
  4009e4:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  4009e6:	f005 000f 	and.w	r0, r5, #15
  4009ea:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  4009ec:	4630      	mov	r0, r6
  4009ee:	4b04      	ldr	r3, [pc, #16]	; (400a00 <gfx_mono_ssd1306_put_byte+0x4c>)
  4009f0:	4798      	blx	r3
  4009f2:	bd70      	pop	{r4, r5, r6, pc}
  4009f4:	004005ed 	.word	0x004005ed
  4009f8:	004005dd 	.word	0x004005dd
  4009fc:	00400b09 	.word	0x00400b09
  400a00:	00400d29 	.word	0x00400d29

00400a04 <gfx_mono_ssd1306_init>:
{
  400a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  400a08:	480d      	ldr	r0, [pc, #52]	; (400a40 <gfx_mono_ssd1306_init+0x3c>)
  400a0a:	4b0e      	ldr	r3, [pc, #56]	; (400a44 <gfx_mono_ssd1306_init+0x40>)
  400a0c:	4798      	blx	r3
	ssd1306_init();
  400a0e:	4b0e      	ldr	r3, [pc, #56]	; (400a48 <gfx_mono_ssd1306_init+0x44>)
  400a10:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  400a12:	2040      	movs	r0, #64	; 0x40
  400a14:	4b0d      	ldr	r3, [pc, #52]	; (400a4c <gfx_mono_ssd1306_init+0x48>)
  400a16:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400a18:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400a1a:	f04f 0801 	mov.w	r8, #1
  400a1e:	462f      	mov	r7, r5
  400a20:	4e0b      	ldr	r6, [pc, #44]	; (400a50 <gfx_mono_ssd1306_init+0x4c>)
{
  400a22:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400a24:	4643      	mov	r3, r8
  400a26:	463a      	mov	r2, r7
  400a28:	b2e1      	uxtb	r1, r4
  400a2a:	4628      	mov	r0, r5
  400a2c:	47b0      	blx	r6
  400a2e:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400a30:	2c80      	cmp	r4, #128	; 0x80
  400a32:	d1f7      	bne.n	400a24 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400a34:	3501      	adds	r5, #1
  400a36:	b2ed      	uxtb	r5, r5
  400a38:	2d04      	cmp	r5, #4
  400a3a:	d1f2      	bne.n	400a22 <gfx_mono_ssd1306_init+0x1e>
  400a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a40:	20400470 	.word	0x20400470
  400a44:	004005d1 	.word	0x004005d1
  400a48:	00400b49 	.word	0x00400b49
  400a4c:	00400b09 	.word	0x00400b09
  400a50:	004009b5 	.word	0x004009b5

00400a54 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  400a54:	09c3      	lsrs	r3, r0, #7
  400a56:	d12a      	bne.n	400aae <gfx_mono_ssd1306_draw_pixel+0x5a>
  400a58:	291f      	cmp	r1, #31
  400a5a:	d828      	bhi.n	400aae <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  400a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a60:	4614      	mov	r4, r2
  400a62:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400a64:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  400a66:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  400a6a:	2201      	movs	r2, #1
  400a6c:	fa02 f701 	lsl.w	r7, r2, r1
  400a70:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400a74:	4601      	mov	r1, r0
  400a76:	4630      	mov	r0, r6
  400a78:	4b0d      	ldr	r3, [pc, #52]	; (400ab0 <gfx_mono_ssd1306_draw_pixel+0x5c>)
  400a7a:	4798      	blx	r3
  400a7c:	4602      	mov	r2, r0
	switch (color) {
  400a7e:	2c01      	cmp	r4, #1
  400a80:	d009      	beq.n	400a96 <gfx_mono_ssd1306_draw_pixel+0x42>
  400a82:	b164      	cbz	r4, 400a9e <gfx_mono_ssd1306_draw_pixel+0x4a>
  400a84:	2c02      	cmp	r4, #2
  400a86:	d00e      	beq.n	400aa6 <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  400a88:	2300      	movs	r3, #0
  400a8a:	4629      	mov	r1, r5
  400a8c:	4630      	mov	r0, r6
  400a8e:	4c09      	ldr	r4, [pc, #36]	; (400ab4 <gfx_mono_ssd1306_draw_pixel+0x60>)
  400a90:	47a0      	blx	r4
  400a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  400a96:	ea48 0200 	orr.w	r2, r8, r0
  400a9a:	b2d2      	uxtb	r2, r2
		break;
  400a9c:	e7f4      	b.n	400a88 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  400a9e:	ea20 0207 	bic.w	r2, r0, r7
  400aa2:	b2d2      	uxtb	r2, r2
		break;
  400aa4:	e7f0      	b.n	400a88 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  400aa6:	ea88 0200 	eor.w	r2, r8, r0
  400aaa:	b2d2      	uxtb	r2, r2
		break;
  400aac:	e7ec      	b.n	400a88 <gfx_mono_ssd1306_draw_pixel+0x34>
  400aae:	4770      	bx	lr
  400ab0:	004005ed 	.word	0x004005ed
  400ab4:	004009b5 	.word	0x004009b5

00400ab8 <gfx_mono_ssd1306_get_byte>:
{
  400ab8:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  400aba:	4b01      	ldr	r3, [pc, #4]	; (400ac0 <gfx_mono_ssd1306_get_byte+0x8>)
  400abc:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  400abe:	bd08      	pop	{r3, pc}
  400ac0:	004005ed 	.word	0x004005ed

00400ac4 <gfx_mono_ssd1306_mask_byte>:
	gfx_mono_ssd1306_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
  400ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400ac6:	4605      	mov	r5, r0
  400ac8:	460e      	mov	r6, r1
  400aca:	4617      	mov	r7, r2
  400acc:	461c      	mov	r4, r3
	return gfx_mono_framebuffer_get_byte(page, column);
  400ace:	4b0c      	ldr	r3, [pc, #48]	; (400b00 <gfx_mono_ssd1306_mask_byte+0x3c>)
  400ad0:	4798      	blx	r3
  400ad2:	4602      	mov	r2, r0
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);

	switch (color) {
  400ad4:	2c01      	cmp	r4, #1
  400ad6:	d008      	beq.n	400aea <gfx_mono_ssd1306_mask_byte+0x26>
  400ad8:	b154      	cbz	r4, 400af0 <gfx_mono_ssd1306_mask_byte+0x2c>
  400ada:	2c02      	cmp	r4, #2
  400adc:	d00c      	beq.n	400af8 <gfx_mono_ssd1306_mask_byte+0x34>

	default:
		break;
	}

	gfx_mono_put_byte(page, column, temp);
  400ade:	2300      	movs	r3, #0
  400ae0:	4631      	mov	r1, r6
  400ae2:	4628      	mov	r0, r5
  400ae4:	4c07      	ldr	r4, [pc, #28]	; (400b04 <gfx_mono_ssd1306_mask_byte+0x40>)
  400ae6:	47a0      	blx	r4
  400ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp |= pixel_mask;
  400aea:	433a      	orrs	r2, r7
  400aec:	b2d2      	uxtb	r2, r2
		break;
  400aee:	e7f6      	b.n	400ade <gfx_mono_ssd1306_mask_byte+0x1a>
		temp &= ~pixel_mask;
  400af0:	ea20 0207 	bic.w	r2, r0, r7
  400af4:	b2d2      	uxtb	r2, r2
		break;
  400af6:	e7f2      	b.n	400ade <gfx_mono_ssd1306_mask_byte+0x1a>
		temp ^= pixel_mask;
  400af8:	407a      	eors	r2, r7
  400afa:	b2d2      	uxtb	r2, r2
		break;
  400afc:	e7ef      	b.n	400ade <gfx_mono_ssd1306_mask_byte+0x1a>
  400afe:	bf00      	nop
  400b00:	004005ed 	.word	0x004005ed
  400b04:	004009b5 	.word	0x004009b5

00400b08 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  400b08:	b538      	push	{r3, r4, r5, lr}
  400b0a:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400b0c:	2208      	movs	r2, #8
  400b0e:	4b09      	ldr	r3, [pc, #36]	; (400b34 <ssd1306_write_command+0x2c>)
  400b10:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400b12:	4c09      	ldr	r4, [pc, #36]	; (400b38 <ssd1306_write_command+0x30>)
  400b14:	2101      	movs	r1, #1
  400b16:	4620      	mov	r0, r4
  400b18:	4b08      	ldr	r3, [pc, #32]	; (400b3c <ssd1306_write_command+0x34>)
  400b1a:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  400b1c:	2301      	movs	r3, #1
  400b1e:	461a      	mov	r2, r3
  400b20:	4629      	mov	r1, r5
  400b22:	4620      	mov	r0, r4
  400b24:	4c06      	ldr	r4, [pc, #24]	; (400b40 <ssd1306_write_command+0x38>)
  400b26:	47a0      	blx	r4
	delay_us(10);
  400b28:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400b2c:	4b05      	ldr	r3, [pc, #20]	; (400b44 <ssd1306_write_command+0x3c>)
  400b2e:	4798      	blx	r3
  400b30:	bd38      	pop	{r3, r4, r5, pc}
  400b32:	bf00      	nop
  400b34:	400e1000 	.word	0x400e1000
  400b38:	40008000 	.word	0x40008000
  400b3c:	00400409 	.word	0x00400409
  400b40:	0040041f 	.word	0x0040041f
  400b44:	20400001 	.word	0x20400001

00400b48 <ssd1306_init>:
{
  400b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400b4c:	4d66      	ldr	r5, [pc, #408]	; (400ce8 <ssd1306_init+0x1a0>)
  400b4e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  400b52:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b54:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400b58:	4b64      	ldr	r3, [pc, #400]	; (400cec <ssd1306_init+0x1a4>)
  400b5a:	2708      	movs	r7, #8
  400b5c:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b5e:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400b62:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400b64:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b68:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  400b6a:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400b6c:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400b70:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  400b72:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400b76:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400b78:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  400b7a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400b7e:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  400b80:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400b82:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b86:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400b88:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400b8a:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400b8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400b90:	f022 0208 	bic.w	r2, r2, #8
  400b94:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400b96:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400b98:	f022 0208 	bic.w	r2, r2, #8
  400b9c:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400b9e:	601f      	str	r7, [r3, #0]
  400ba0:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ba2:	631f      	str	r7, [r3, #48]	; 0x30
  400ba4:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400ba6:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400d24 <ssd1306_init+0x1dc>
  400baa:	2300      	movs	r3, #0
  400bac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400bb0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400bb4:	4640      	mov	r0, r8
  400bb6:	4c4e      	ldr	r4, [pc, #312]	; (400cf0 <ssd1306_init+0x1a8>)
  400bb8:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400bba:	2300      	movs	r3, #0
  400bbc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400bc0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400bc4:	4640      	mov	r0, r8
  400bc6:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400bc8:	2300      	movs	r3, #0
  400bca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400bce:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400bd2:	4640      	mov	r0, r8
  400bd4:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400bd6:	2300      	movs	r3, #0
  400bd8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400bdc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400be0:	4640      	mov	r0, r8
  400be2:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400be4:	2300      	movs	r3, #0
  400be6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400bea:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400bee:	4640      	mov	r0, r8
  400bf0:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400bf2:	2300      	movs	r3, #0
  400bf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400bf8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400bfc:	4640      	mov	r0, r8
  400bfe:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400c00:	4c3c      	ldr	r4, [pc, #240]	; (400cf4 <ssd1306_init+0x1ac>)
  400c02:	f04f 0902 	mov.w	r9, #2
  400c06:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400c0a:	f04f 0880 	mov.w	r8, #128	; 0x80
  400c0e:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400c12:	6863      	ldr	r3, [r4, #4]
  400c14:	f043 0301 	orr.w	r3, r3, #1
  400c18:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  400c1a:	463a      	mov	r2, r7
  400c1c:	2101      	movs	r1, #1
  400c1e:	4620      	mov	r0, r4
  400c20:	4b35      	ldr	r3, [pc, #212]	; (400cf8 <ssd1306_init+0x1b0>)
  400c22:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400c24:	2200      	movs	r2, #0
  400c26:	2101      	movs	r1, #1
  400c28:	4620      	mov	r0, r4
  400c2a:	4b34      	ldr	r3, [pc, #208]	; (400cfc <ssd1306_init+0x1b4>)
  400c2c:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400c2e:	2200      	movs	r2, #0
  400c30:	2101      	movs	r1, #1
  400c32:	4620      	mov	r0, r4
  400c34:	4b32      	ldr	r3, [pc, #200]	; (400d00 <ssd1306_init+0x1b8>)
  400c36:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400c38:	6863      	ldr	r3, [r4, #4]
  400c3a:	f023 0302 	bic.w	r3, r3, #2
  400c3e:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400c40:	2200      	movs	r2, #0
  400c42:	2101      	movs	r1, #1
  400c44:	4620      	mov	r0, r4
  400c46:	4b2f      	ldr	r3, [pc, #188]	; (400d04 <ssd1306_init+0x1bc>)
  400c48:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400c4a:	6863      	ldr	r3, [r4, #4]
  400c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400c50:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400c52:	6863      	ldr	r3, [r4, #4]
  400c54:	f043 0310 	orr.w	r3, r3, #16
  400c58:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(1000000, sysclk_get_peripheral_hz());
  400c5a:	492b      	ldr	r1, [pc, #172]	; (400d08 <ssd1306_init+0x1c0>)
  400c5c:	482b      	ldr	r0, [pc, #172]	; (400d0c <ssd1306_init+0x1c4>)
  400c5e:	4b2c      	ldr	r3, [pc, #176]	; (400d10 <ssd1306_init+0x1c8>)
  400c60:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  400c62:	b2c2      	uxtb	r2, r0
  400c64:	2101      	movs	r1, #1
  400c66:	4620      	mov	r0, r4
  400c68:	4b2a      	ldr	r3, [pc, #168]	; (400d14 <ssd1306_init+0x1cc>)
  400c6a:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400c6c:	4620      	mov	r0, r4
  400c6e:	4b2a      	ldr	r3, [pc, #168]	; (400d18 <ssd1306_init+0x1d0>)
  400c70:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400c72:	2301      	movs	r3, #1
  400c74:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400c76:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400c78:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400c7c:	4c27      	ldr	r4, [pc, #156]	; (400d1c <ssd1306_init+0x1d4>)
  400c7e:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400c80:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400c82:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400c86:	47a0      	blx	r4
  400c88:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400c8a:	20a8      	movs	r0, #168	; 0xa8
  400c8c:	4c24      	ldr	r4, [pc, #144]	; (400d20 <ssd1306_init+0x1d8>)
  400c8e:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400c90:	201f      	movs	r0, #31
  400c92:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400c94:	20d3      	movs	r0, #211	; 0xd3
  400c96:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400c98:	2000      	movs	r0, #0
  400c9a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400c9c:	2040      	movs	r0, #64	; 0x40
  400c9e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400ca0:	20a1      	movs	r0, #161	; 0xa1
  400ca2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400ca4:	20c8      	movs	r0, #200	; 0xc8
  400ca6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400ca8:	20da      	movs	r0, #218	; 0xda
  400caa:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400cac:	4648      	mov	r0, r9
  400cae:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400cb0:	2081      	movs	r0, #129	; 0x81
  400cb2:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400cb4:	208f      	movs	r0, #143	; 0x8f
  400cb6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400cb8:	20a4      	movs	r0, #164	; 0xa4
  400cba:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400cbc:	20a6      	movs	r0, #166	; 0xa6
  400cbe:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400cc0:	20d5      	movs	r0, #213	; 0xd5
  400cc2:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400cc4:	4640      	mov	r0, r8
  400cc6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400cc8:	208d      	movs	r0, #141	; 0x8d
  400cca:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400ccc:	2014      	movs	r0, #20
  400cce:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400cd0:	20db      	movs	r0, #219	; 0xdb
  400cd2:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400cd4:	2040      	movs	r0, #64	; 0x40
  400cd6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400cd8:	20d9      	movs	r0, #217	; 0xd9
  400cda:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400cdc:	20f1      	movs	r0, #241	; 0xf1
  400cde:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400ce0:	20af      	movs	r0, #175	; 0xaf
  400ce2:	47a0      	blx	r4
  400ce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400ce8:	400e1200 	.word	0x400e1200
  400cec:	400e1000 	.word	0x400e1000
  400cf0:	00401011 	.word	0x00401011
  400cf4:	40008000 	.word	0x40008000
  400cf8:	0040048f 	.word	0x0040048f
  400cfc:	00400453 	.word	0x00400453
  400d00:	00400471 	.word	0x00400471
  400d04:	004004d5 	.word	0x004004d5
  400d08:	08f0d180 	.word	0x08f0d180
  400d0c:	000f4240 	.word	0x000f4240
  400d10:	004004e9 	.word	0x004004e9
  400d14:	004004ff 	.word	0x004004ff
  400d18:	004003dd 	.word	0x004003dd
  400d1c:	20400001 	.word	0x20400001
  400d20:	00400b09 	.word	0x00400b09
  400d24:	400e1400 	.word	0x400e1400

00400d28 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400d28:	b538      	push	{r3, r4, r5, lr}
  400d2a:	4605      	mov	r5, r0
  400d2c:	2208      	movs	r2, #8
  400d2e:	4b09      	ldr	r3, [pc, #36]	; (400d54 <ssd1306_write_data+0x2c>)
  400d30:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400d32:	4c09      	ldr	r4, [pc, #36]	; (400d58 <ssd1306_write_data+0x30>)
  400d34:	2101      	movs	r1, #1
  400d36:	4620      	mov	r0, r4
  400d38:	4b08      	ldr	r3, [pc, #32]	; (400d5c <ssd1306_write_data+0x34>)
  400d3a:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400d3c:	2301      	movs	r3, #1
  400d3e:	461a      	mov	r2, r3
  400d40:	4629      	mov	r1, r5
  400d42:	4620      	mov	r0, r4
  400d44:	4c06      	ldr	r4, [pc, #24]	; (400d60 <ssd1306_write_data+0x38>)
  400d46:	47a0      	blx	r4
	delay_us(10);
  400d48:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400d4c:	4b05      	ldr	r3, [pc, #20]	; (400d64 <ssd1306_write_data+0x3c>)
  400d4e:	4798      	blx	r3
  400d50:	bd38      	pop	{r3, r4, r5, pc}
  400d52:	bf00      	nop
  400d54:	400e1000 	.word	0x400e1000
  400d58:	40008000 	.word	0x40008000
  400d5c:	00400409 	.word	0x00400409
  400d60:	0040041f 	.word	0x0040041f
  400d64:	20400001 	.word	0x20400001

00400d68 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400d68:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400d6a:	4810      	ldr	r0, [pc, #64]	; (400dac <sysclk_init+0x44>)
  400d6c:	4b10      	ldr	r3, [pc, #64]	; (400db0 <sysclk_init+0x48>)
  400d6e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400d70:	213e      	movs	r1, #62	; 0x3e
  400d72:	2000      	movs	r0, #0
  400d74:	4b0f      	ldr	r3, [pc, #60]	; (400db4 <sysclk_init+0x4c>)
  400d76:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400d78:	4c0f      	ldr	r4, [pc, #60]	; (400db8 <sysclk_init+0x50>)
  400d7a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400d7c:	2800      	cmp	r0, #0
  400d7e:	d0fc      	beq.n	400d7a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400d80:	4b0e      	ldr	r3, [pc, #56]	; (400dbc <sysclk_init+0x54>)
  400d82:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400d84:	4a0e      	ldr	r2, [pc, #56]	; (400dc0 <sysclk_init+0x58>)
  400d86:	4b0f      	ldr	r3, [pc, #60]	; (400dc4 <sysclk_init+0x5c>)
  400d88:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400d8a:	4c0f      	ldr	r4, [pc, #60]	; (400dc8 <sysclk_init+0x60>)
  400d8c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400d8e:	2800      	cmp	r0, #0
  400d90:	d0fc      	beq.n	400d8c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400d92:	2002      	movs	r0, #2
  400d94:	4b0d      	ldr	r3, [pc, #52]	; (400dcc <sysclk_init+0x64>)
  400d96:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400d98:	2000      	movs	r0, #0
  400d9a:	4b0d      	ldr	r3, [pc, #52]	; (400dd0 <sysclk_init+0x68>)
  400d9c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400d9e:	4b0d      	ldr	r3, [pc, #52]	; (400dd4 <sysclk_init+0x6c>)
  400da0:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400da2:	4802      	ldr	r0, [pc, #8]	; (400dac <sysclk_init+0x44>)
  400da4:	4b02      	ldr	r3, [pc, #8]	; (400db0 <sysclk_init+0x48>)
  400da6:	4798      	blx	r3
  400da8:	bd10      	pop	{r4, pc}
  400daa:	bf00      	nop
  400dac:	11e1a300 	.word	0x11e1a300
  400db0:	00401551 	.word	0x00401551
  400db4:	004012a1 	.word	0x004012a1
  400db8:	004012f5 	.word	0x004012f5
  400dbc:	00401305 	.word	0x00401305
  400dc0:	20183f01 	.word	0x20183f01
  400dc4:	400e0600 	.word	0x400e0600
  400dc8:	00401315 	.word	0x00401315
  400dcc:	00401205 	.word	0x00401205
  400dd0:	0040123d 	.word	0x0040123d
  400dd4:	00401445 	.word	0x00401445

00400dd8 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400dda:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400dde:	4b48      	ldr	r3, [pc, #288]	; (400f00 <board_init+0x128>)
  400de0:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400de2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400de6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400dea:	4b46      	ldr	r3, [pc, #280]	; (400f04 <board_init+0x12c>)
  400dec:	2200      	movs	r2, #0
  400dee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400df2:	695a      	ldr	r2, [r3, #20]
  400df4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400df8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400dfa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400dfe:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400e02:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400e06:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400e0a:	f007 0007 	and.w	r0, r7, #7
  400e0e:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400e10:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400e14:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400e18:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400e1c:	f3bf 8f4f 	dsb	sy
  400e20:	f04f 34ff 	mov.w	r4, #4294967295
  400e24:	fa04 fc00 	lsl.w	ip, r4, r0
  400e28:	fa06 f000 	lsl.w	r0, r6, r0
  400e2c:	fa04 f40e 	lsl.w	r4, r4, lr
  400e30:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400e34:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400e36:	463a      	mov	r2, r7
  400e38:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400e3a:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400e3e:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400e42:	3a01      	subs	r2, #1
  400e44:	4423      	add	r3, r4
  400e46:	f1b2 3fff 	cmp.w	r2, #4294967295
  400e4a:	d1f6      	bne.n	400e3a <board_init+0x62>
        } while(sets--);
  400e4c:	3e01      	subs	r6, #1
  400e4e:	4460      	add	r0, ip
  400e50:	f1b6 3fff 	cmp.w	r6, #4294967295
  400e54:	d1ef      	bne.n	400e36 <board_init+0x5e>
  400e56:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400e5a:	4b2a      	ldr	r3, [pc, #168]	; (400f04 <board_init+0x12c>)
  400e5c:	695a      	ldr	r2, [r3, #20]
  400e5e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400e62:	615a      	str	r2, [r3, #20]
  400e64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400e68:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400e6c:	4a26      	ldr	r2, [pc, #152]	; (400f08 <board_init+0x130>)
  400e6e:	4927      	ldr	r1, [pc, #156]	; (400f0c <board_init+0x134>)
  400e70:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400e72:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400e76:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400e78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400e7c:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400e80:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400e84:	f022 0201 	bic.w	r2, r2, #1
  400e88:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400e8c:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400e90:	f022 0201 	bic.w	r2, r2, #1
  400e94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400e98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400e9c:	f3bf 8f6f 	isb	sy
  400ea0:	200a      	movs	r0, #10
  400ea2:	4c1b      	ldr	r4, [pc, #108]	; (400f10 <board_init+0x138>)
  400ea4:	47a0      	blx	r4
  400ea6:	200b      	movs	r0, #11
  400ea8:	47a0      	blx	r4
  400eaa:	200c      	movs	r0, #12
  400eac:	47a0      	blx	r4
  400eae:	2010      	movs	r0, #16
  400eb0:	47a0      	blx	r4
  400eb2:	2011      	movs	r0, #17
  400eb4:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400eb6:	4b17      	ldr	r3, [pc, #92]	; (400f14 <board_init+0x13c>)
  400eb8:	f44f 7280 	mov.w	r2, #256	; 0x100
  400ebc:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400ebe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ec2:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400ec4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400ec8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400ecc:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400ece:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400ed2:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400ed4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400ed8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400eda:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400ee0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400ee2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400ee6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400ee8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400eea:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400eee:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400ef0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400ef4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400ef8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400efe:	bf00      	nop
  400f00:	400e1850 	.word	0x400e1850
  400f04:	e000ed00 	.word	0xe000ed00
  400f08:	400e0c00 	.word	0x400e0c00
  400f0c:	5a00080c 	.word	0x5a00080c
  400f10:	00401325 	.word	0x00401325
  400f14:	400e1200 	.word	0x400e1200

00400f18 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400f18:	6301      	str	r1, [r0, #48]	; 0x30
  400f1a:	4770      	bx	lr

00400f1c <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400f1c:	6341      	str	r1, [r0, #52]	; 0x34
  400f1e:	4770      	bx	lr

00400f20 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400f20:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400f22:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400f26:	d03a      	beq.n	400f9e <pio_set_peripheral+0x7e>
  400f28:	d813      	bhi.n	400f52 <pio_set_peripheral+0x32>
  400f2a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400f2e:	d025      	beq.n	400f7c <pio_set_peripheral+0x5c>
  400f30:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400f34:	d10a      	bne.n	400f4c <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f36:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400f38:	4313      	orrs	r3, r2
  400f3a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400f3c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400f3e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400f40:	400b      	ands	r3, r1
  400f42:	ea23 0302 	bic.w	r3, r3, r2
  400f46:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400f48:	6042      	str	r2, [r0, #4]
  400f4a:	4770      	bx	lr
	switch (ul_type) {
  400f4c:	2900      	cmp	r1, #0
  400f4e:	d1fb      	bne.n	400f48 <pio_set_peripheral+0x28>
  400f50:	4770      	bx	lr
  400f52:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400f56:	d021      	beq.n	400f9c <pio_set_peripheral+0x7c>
  400f58:	d809      	bhi.n	400f6e <pio_set_peripheral+0x4e>
  400f5a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400f5e:	d1f3      	bne.n	400f48 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f60:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400f62:	4313      	orrs	r3, r2
  400f64:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400f66:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400f68:	4313      	orrs	r3, r2
  400f6a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400f6c:	e7ec      	b.n	400f48 <pio_set_peripheral+0x28>
	switch (ul_type) {
  400f6e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400f72:	d013      	beq.n	400f9c <pio_set_peripheral+0x7c>
  400f74:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400f78:	d010      	beq.n	400f9c <pio_set_peripheral+0x7c>
  400f7a:	e7e5      	b.n	400f48 <pio_set_peripheral+0x28>
{
  400f7c:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f7e:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400f80:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400f82:	43d3      	mvns	r3, r2
  400f84:	4021      	ands	r1, r4
  400f86:	461c      	mov	r4, r3
  400f88:	4019      	ands	r1, r3
  400f8a:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400f8c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400f8e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400f90:	400b      	ands	r3, r1
  400f92:	4023      	ands	r3, r4
  400f94:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400f96:	6042      	str	r2, [r0, #4]
}
  400f98:	f85d 4b04 	ldr.w	r4, [sp], #4
  400f9c:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f9e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400fa0:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400fa2:	400b      	ands	r3, r1
  400fa4:	ea23 0302 	bic.w	r3, r3, r2
  400fa8:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400faa:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400fac:	4313      	orrs	r3, r2
  400fae:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400fb0:	e7ca      	b.n	400f48 <pio_set_peripheral+0x28>

00400fb2 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400fb2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400fb4:	f012 0f01 	tst.w	r2, #1
  400fb8:	d10d      	bne.n	400fd6 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400fba:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400fbc:	f012 0f0a 	tst.w	r2, #10
  400fc0:	d00b      	beq.n	400fda <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400fc2:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400fc4:	f012 0f02 	tst.w	r2, #2
  400fc8:	d109      	bne.n	400fde <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400fca:	f012 0f08 	tst.w	r2, #8
  400fce:	d008      	beq.n	400fe2 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400fd0:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400fd4:	e005      	b.n	400fe2 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400fd6:	6641      	str	r1, [r0, #100]	; 0x64
  400fd8:	e7f0      	b.n	400fbc <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400fda:	6241      	str	r1, [r0, #36]	; 0x24
  400fdc:	e7f2      	b.n	400fc4 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400fde:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400fe2:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400fe4:	6001      	str	r1, [r0, #0]
  400fe6:	4770      	bx	lr

00400fe8 <pio_set_output>:
{
  400fe8:	b410      	push	{r4}
  400fea:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400fec:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400fee:	b94c      	cbnz	r4, 401004 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400ff0:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400ff2:	b14b      	cbz	r3, 401008 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400ff4:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400ff6:	b94a      	cbnz	r2, 40100c <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400ff8:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400ffa:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400ffc:	6001      	str	r1, [r0, #0]
}
  400ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
  401002:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401004:	6641      	str	r1, [r0, #100]	; 0x64
  401006:	e7f4      	b.n	400ff2 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  401008:	6541      	str	r1, [r0, #84]	; 0x54
  40100a:	e7f4      	b.n	400ff6 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  40100c:	6301      	str	r1, [r0, #48]	; 0x30
  40100e:	e7f4      	b.n	400ffa <pio_set_output+0x12>

00401010 <pio_configure>:
{
  401010:	b570      	push	{r4, r5, r6, lr}
  401012:	b082      	sub	sp, #8
  401014:	4605      	mov	r5, r0
  401016:	4616      	mov	r6, r2
  401018:	461c      	mov	r4, r3
	switch (ul_type) {
  40101a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40101e:	d014      	beq.n	40104a <pio_configure+0x3a>
  401020:	d90a      	bls.n	401038 <pio_configure+0x28>
  401022:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401026:	d024      	beq.n	401072 <pio_configure+0x62>
  401028:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40102c:	d021      	beq.n	401072 <pio_configure+0x62>
  40102e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401032:	d017      	beq.n	401064 <pio_configure+0x54>
		return 0;
  401034:	2000      	movs	r0, #0
  401036:	e01a      	b.n	40106e <pio_configure+0x5e>
	switch (ul_type) {
  401038:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40103c:	d005      	beq.n	40104a <pio_configure+0x3a>
  40103e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401042:	d002      	beq.n	40104a <pio_configure+0x3a>
  401044:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401048:	d1f4      	bne.n	401034 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40104a:	4632      	mov	r2, r6
  40104c:	4628      	mov	r0, r5
  40104e:	4b11      	ldr	r3, [pc, #68]	; (401094 <pio_configure+0x84>)
  401050:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401052:	f014 0f01 	tst.w	r4, #1
  401056:	d102      	bne.n	40105e <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  401058:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40105a:	2001      	movs	r0, #1
  40105c:	e007      	b.n	40106e <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  40105e:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  401060:	2001      	movs	r0, #1
  401062:	e004      	b.n	40106e <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401064:	461a      	mov	r2, r3
  401066:	4631      	mov	r1, r6
  401068:	4b0b      	ldr	r3, [pc, #44]	; (401098 <pio_configure+0x88>)
  40106a:	4798      	blx	r3
	return 1;
  40106c:	2001      	movs	r0, #1
}
  40106e:	b002      	add	sp, #8
  401070:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401072:	f004 0301 	and.w	r3, r4, #1
  401076:	9300      	str	r3, [sp, #0]
  401078:	f3c4 0380 	ubfx	r3, r4, #2, #1
  40107c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401080:	bf14      	ite	ne
  401082:	2200      	movne	r2, #0
  401084:	2201      	moveq	r2, #1
  401086:	4631      	mov	r1, r6
  401088:	4628      	mov	r0, r5
  40108a:	4c04      	ldr	r4, [pc, #16]	; (40109c <pio_configure+0x8c>)
  40108c:	47a0      	blx	r4
	return 1;
  40108e:	2001      	movs	r0, #1
		break;
  401090:	e7ed      	b.n	40106e <pio_configure+0x5e>
  401092:	bf00      	nop
  401094:	00400f21 	.word	0x00400f21
  401098:	00400fb3 	.word	0x00400fb3
  40109c:	00400fe9 	.word	0x00400fe9

004010a0 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4010a0:	f012 0f10 	tst.w	r2, #16
  4010a4:	d012      	beq.n	4010cc <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  4010a6:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4010aa:	f012 0f20 	tst.w	r2, #32
  4010ae:	d007      	beq.n	4010c0 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  4010b0:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  4010b4:	f012 0f40 	tst.w	r2, #64	; 0x40
  4010b8:	d005      	beq.n	4010c6 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  4010ba:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  4010be:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  4010c0:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  4010c4:	e7f6      	b.n	4010b4 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  4010c6:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  4010ca:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  4010cc:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4010d0:	4770      	bx	lr

004010d2 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  4010d2:	6401      	str	r1, [r0, #64]	; 0x40
  4010d4:	4770      	bx	lr

004010d6 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4010d6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4010d8:	4770      	bx	lr

004010da <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4010da:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4010dc:	4770      	bx	lr
	...

004010e0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4010e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4010e4:	4604      	mov	r4, r0
  4010e6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4010e8:	4b0e      	ldr	r3, [pc, #56]	; (401124 <pio_handler_process+0x44>)
  4010ea:	4798      	blx	r3
  4010ec:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4010ee:	4620      	mov	r0, r4
  4010f0:	4b0d      	ldr	r3, [pc, #52]	; (401128 <pio_handler_process+0x48>)
  4010f2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4010f4:	4005      	ands	r5, r0
  4010f6:	d013      	beq.n	401120 <pio_handler_process+0x40>
  4010f8:	4c0c      	ldr	r4, [pc, #48]	; (40112c <pio_handler_process+0x4c>)
  4010fa:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4010fe:	e003      	b.n	401108 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401100:	42b4      	cmp	r4, r6
  401102:	d00d      	beq.n	401120 <pio_handler_process+0x40>
  401104:	3410      	adds	r4, #16
		while (status != 0) {
  401106:	b15d      	cbz	r5, 401120 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401108:	6820      	ldr	r0, [r4, #0]
  40110a:	4540      	cmp	r0, r8
  40110c:	d1f8      	bne.n	401100 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40110e:	6861      	ldr	r1, [r4, #4]
  401110:	4229      	tst	r1, r5
  401112:	d0f5      	beq.n	401100 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401114:	68e3      	ldr	r3, [r4, #12]
  401116:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401118:	6863      	ldr	r3, [r4, #4]
  40111a:	ea25 0503 	bic.w	r5, r5, r3
  40111e:	e7ef      	b.n	401100 <pio_handler_process+0x20>
  401120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401124:	004010d7 	.word	0x004010d7
  401128:	004010db 	.word	0x004010db
  40112c:	20400670 	.word	0x20400670

00401130 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  401130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  401132:	4c18      	ldr	r4, [pc, #96]	; (401194 <pio_handler_set+0x64>)
  401134:	6826      	ldr	r6, [r4, #0]
  401136:	2e06      	cmp	r6, #6
  401138:	d82a      	bhi.n	401190 <pio_handler_set+0x60>
  40113a:	f04f 0c00 	mov.w	ip, #0
  40113e:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401140:	4f15      	ldr	r7, [pc, #84]	; (401198 <pio_handler_set+0x68>)
  401142:	e004      	b.n	40114e <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  401144:	3401      	adds	r4, #1
  401146:	b2e4      	uxtb	r4, r4
  401148:	46a4      	mov	ip, r4
  40114a:	42a6      	cmp	r6, r4
  40114c:	d309      	bcc.n	401162 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  40114e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401150:	0125      	lsls	r5, r4, #4
  401152:	597d      	ldr	r5, [r7, r5]
  401154:	428d      	cmp	r5, r1
  401156:	d1f5      	bne.n	401144 <pio_handler_set+0x14>
  401158:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  40115c:	686d      	ldr	r5, [r5, #4]
  40115e:	4295      	cmp	r5, r2
  401160:	d1f0      	bne.n	401144 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  401162:	4d0d      	ldr	r5, [pc, #52]	; (401198 <pio_handler_set+0x68>)
  401164:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  401168:	eb05 040e 	add.w	r4, r5, lr
  40116c:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  401170:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  401172:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  401174:	9906      	ldr	r1, [sp, #24]
  401176:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  401178:	3601      	adds	r6, #1
  40117a:	4566      	cmp	r6, ip
  40117c:	d005      	beq.n	40118a <pio_handler_set+0x5a>
  40117e:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  401180:	461a      	mov	r2, r3
  401182:	4b06      	ldr	r3, [pc, #24]	; (40119c <pio_handler_set+0x6c>)
  401184:	4798      	blx	r3

	return 0;
  401186:	2000      	movs	r0, #0
  401188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  40118a:	4902      	ldr	r1, [pc, #8]	; (401194 <pio_handler_set+0x64>)
  40118c:	600e      	str	r6, [r1, #0]
  40118e:	e7f6      	b.n	40117e <pio_handler_set+0x4e>
		return 1;
  401190:	2001      	movs	r0, #1
}
  401192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401194:	204006e0 	.word	0x204006e0
  401198:	20400670 	.word	0x20400670
  40119c:	004010a1 	.word	0x004010a1

004011a0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4011a0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4011a2:	210a      	movs	r1, #10
  4011a4:	4801      	ldr	r0, [pc, #4]	; (4011ac <PIOA_Handler+0xc>)
  4011a6:	4b02      	ldr	r3, [pc, #8]	; (4011b0 <PIOA_Handler+0x10>)
  4011a8:	4798      	blx	r3
  4011aa:	bd08      	pop	{r3, pc}
  4011ac:	400e0e00 	.word	0x400e0e00
  4011b0:	004010e1 	.word	0x004010e1

004011b4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4011b4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4011b6:	210b      	movs	r1, #11
  4011b8:	4801      	ldr	r0, [pc, #4]	; (4011c0 <PIOB_Handler+0xc>)
  4011ba:	4b02      	ldr	r3, [pc, #8]	; (4011c4 <PIOB_Handler+0x10>)
  4011bc:	4798      	blx	r3
  4011be:	bd08      	pop	{r3, pc}
  4011c0:	400e1000 	.word	0x400e1000
  4011c4:	004010e1 	.word	0x004010e1

004011c8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4011c8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4011ca:	210c      	movs	r1, #12
  4011cc:	4801      	ldr	r0, [pc, #4]	; (4011d4 <PIOC_Handler+0xc>)
  4011ce:	4b02      	ldr	r3, [pc, #8]	; (4011d8 <PIOC_Handler+0x10>)
  4011d0:	4798      	blx	r3
  4011d2:	bd08      	pop	{r3, pc}
  4011d4:	400e1200 	.word	0x400e1200
  4011d8:	004010e1 	.word	0x004010e1

004011dc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4011dc:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4011de:	2110      	movs	r1, #16
  4011e0:	4801      	ldr	r0, [pc, #4]	; (4011e8 <PIOD_Handler+0xc>)
  4011e2:	4b02      	ldr	r3, [pc, #8]	; (4011ec <PIOD_Handler+0x10>)
  4011e4:	4798      	blx	r3
  4011e6:	bd08      	pop	{r3, pc}
  4011e8:	400e1400 	.word	0x400e1400
  4011ec:	004010e1 	.word	0x004010e1

004011f0 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4011f0:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4011f2:	2111      	movs	r1, #17
  4011f4:	4801      	ldr	r0, [pc, #4]	; (4011fc <PIOE_Handler+0xc>)
  4011f6:	4b02      	ldr	r3, [pc, #8]	; (401200 <PIOE_Handler+0x10>)
  4011f8:	4798      	blx	r3
  4011fa:	bd08      	pop	{r3, pc}
  4011fc:	400e1600 	.word	0x400e1600
  401200:	004010e1 	.word	0x004010e1

00401204 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401204:	2803      	cmp	r0, #3
  401206:	d011      	beq.n	40122c <pmc_mck_set_division+0x28>
  401208:	2804      	cmp	r0, #4
  40120a:	d012      	beq.n	401232 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40120c:	2802      	cmp	r0, #2
  40120e:	bf0c      	ite	eq
  401210:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401214:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401216:	4a08      	ldr	r2, [pc, #32]	; (401238 <pmc_mck_set_division+0x34>)
  401218:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40121a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40121e:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401220:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401222:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401224:	f013 0f08 	tst.w	r3, #8
  401228:	d0fb      	beq.n	401222 <pmc_mck_set_division+0x1e>
}
  40122a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40122c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401230:	e7f1      	b.n	401216 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401232:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401236:	e7ee      	b.n	401216 <pmc_mck_set_division+0x12>
  401238:	400e0600 	.word	0x400e0600

0040123c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40123c:	4a17      	ldr	r2, [pc, #92]	; (40129c <pmc_switch_mck_to_pllack+0x60>)
  40123e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401244:	4318      	orrs	r0, r3
  401246:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401248:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40124a:	f013 0f08 	tst.w	r3, #8
  40124e:	d10a      	bne.n	401266 <pmc_switch_mck_to_pllack+0x2a>
  401250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401254:	4911      	ldr	r1, [pc, #68]	; (40129c <pmc_switch_mck_to_pllack+0x60>)
  401256:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401258:	f012 0f08 	tst.w	r2, #8
  40125c:	d103      	bne.n	401266 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40125e:	3b01      	subs	r3, #1
  401260:	d1f9      	bne.n	401256 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401262:	2001      	movs	r0, #1
  401264:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401266:	4a0d      	ldr	r2, [pc, #52]	; (40129c <pmc_switch_mck_to_pllack+0x60>)
  401268:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40126a:	f023 0303 	bic.w	r3, r3, #3
  40126e:	f043 0302 	orr.w	r3, r3, #2
  401272:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401274:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401276:	f013 0f08 	tst.w	r3, #8
  40127a:	d10a      	bne.n	401292 <pmc_switch_mck_to_pllack+0x56>
  40127c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401280:	4906      	ldr	r1, [pc, #24]	; (40129c <pmc_switch_mck_to_pllack+0x60>)
  401282:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401284:	f012 0f08 	tst.w	r2, #8
  401288:	d105      	bne.n	401296 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40128a:	3b01      	subs	r3, #1
  40128c:	d1f9      	bne.n	401282 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40128e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401290:	4770      	bx	lr
	return 0;
  401292:	2000      	movs	r0, #0
  401294:	4770      	bx	lr
  401296:	2000      	movs	r0, #0
  401298:	4770      	bx	lr
  40129a:	bf00      	nop
  40129c:	400e0600 	.word	0x400e0600

004012a0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4012a0:	b9a0      	cbnz	r0, 4012cc <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4012a2:	480e      	ldr	r0, [pc, #56]	; (4012dc <pmc_switch_mainck_to_xtal+0x3c>)
  4012a4:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4012a6:	0209      	lsls	r1, r1, #8
  4012a8:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4012aa:	4a0d      	ldr	r2, [pc, #52]	; (4012e0 <pmc_switch_mainck_to_xtal+0x40>)
  4012ac:	401a      	ands	r2, r3
  4012ae:	4b0d      	ldr	r3, [pc, #52]	; (4012e4 <pmc_switch_mainck_to_xtal+0x44>)
  4012b0:	4313      	orrs	r3, r2
  4012b2:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4012b4:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4012b6:	4602      	mov	r2, r0
  4012b8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012ba:	f013 0f01 	tst.w	r3, #1
  4012be:	d0fb      	beq.n	4012b8 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4012c0:	4a06      	ldr	r2, [pc, #24]	; (4012dc <pmc_switch_mainck_to_xtal+0x3c>)
  4012c2:	6a11      	ldr	r1, [r2, #32]
  4012c4:	4b08      	ldr	r3, [pc, #32]	; (4012e8 <pmc_switch_mainck_to_xtal+0x48>)
  4012c6:	430b      	orrs	r3, r1
  4012c8:	6213      	str	r3, [r2, #32]
  4012ca:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4012cc:	4903      	ldr	r1, [pc, #12]	; (4012dc <pmc_switch_mainck_to_xtal+0x3c>)
  4012ce:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4012d0:	4a06      	ldr	r2, [pc, #24]	; (4012ec <pmc_switch_mainck_to_xtal+0x4c>)
  4012d2:	401a      	ands	r2, r3
  4012d4:	4b06      	ldr	r3, [pc, #24]	; (4012f0 <pmc_switch_mainck_to_xtal+0x50>)
  4012d6:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4012d8:	620b      	str	r3, [r1, #32]
  4012da:	4770      	bx	lr
  4012dc:	400e0600 	.word	0x400e0600
  4012e0:	ffc8fffc 	.word	0xffc8fffc
  4012e4:	00370001 	.word	0x00370001
  4012e8:	01370000 	.word	0x01370000
  4012ec:	fec8fffc 	.word	0xfec8fffc
  4012f0:	01370002 	.word	0x01370002

004012f4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4012f4:	4b02      	ldr	r3, [pc, #8]	; (401300 <pmc_osc_is_ready_mainck+0xc>)
  4012f6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4012f8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4012fc:	4770      	bx	lr
  4012fe:	bf00      	nop
  401300:	400e0600 	.word	0x400e0600

00401304 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401304:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401308:	4b01      	ldr	r3, [pc, #4]	; (401310 <pmc_disable_pllack+0xc>)
  40130a:	629a      	str	r2, [r3, #40]	; 0x28
  40130c:	4770      	bx	lr
  40130e:	bf00      	nop
  401310:	400e0600 	.word	0x400e0600

00401314 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401314:	4b02      	ldr	r3, [pc, #8]	; (401320 <pmc_is_locked_pllack+0xc>)
  401316:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401318:	f000 0002 	and.w	r0, r0, #2
  40131c:	4770      	bx	lr
  40131e:	bf00      	nop
  401320:	400e0600 	.word	0x400e0600

00401324 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401324:	283f      	cmp	r0, #63	; 0x3f
  401326:	d81e      	bhi.n	401366 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401328:	281f      	cmp	r0, #31
  40132a:	d80c      	bhi.n	401346 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40132c:	4b11      	ldr	r3, [pc, #68]	; (401374 <pmc_enable_periph_clk+0x50>)
  40132e:	699a      	ldr	r2, [r3, #24]
  401330:	2301      	movs	r3, #1
  401332:	4083      	lsls	r3, r0
  401334:	4393      	bics	r3, r2
  401336:	d018      	beq.n	40136a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401338:	2301      	movs	r3, #1
  40133a:	fa03 f000 	lsl.w	r0, r3, r0
  40133e:	4b0d      	ldr	r3, [pc, #52]	; (401374 <pmc_enable_periph_clk+0x50>)
  401340:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401342:	2000      	movs	r0, #0
  401344:	4770      	bx	lr
		ul_id -= 32;
  401346:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401348:	4b0a      	ldr	r3, [pc, #40]	; (401374 <pmc_enable_periph_clk+0x50>)
  40134a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40134e:	2301      	movs	r3, #1
  401350:	4083      	lsls	r3, r0
  401352:	4393      	bics	r3, r2
  401354:	d00b      	beq.n	40136e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401356:	2301      	movs	r3, #1
  401358:	fa03 f000 	lsl.w	r0, r3, r0
  40135c:	4b05      	ldr	r3, [pc, #20]	; (401374 <pmc_enable_periph_clk+0x50>)
  40135e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401362:	2000      	movs	r0, #0
  401364:	4770      	bx	lr
		return 1;
  401366:	2001      	movs	r0, #1
  401368:	4770      	bx	lr
	return 0;
  40136a:	2000      	movs	r0, #0
  40136c:	4770      	bx	lr
  40136e:	2000      	movs	r0, #0
}
  401370:	4770      	bx	lr
  401372:	bf00      	nop
  401374:	400e0600 	.word	0x400e0600

00401378 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401378:	e7fe      	b.n	401378 <Dummy_Handler>
	...

0040137c <Reset_Handler>:
{
  40137c:	b500      	push	{lr}
  40137e:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401380:	4b25      	ldr	r3, [pc, #148]	; (401418 <Reset_Handler+0x9c>)
  401382:	4a26      	ldr	r2, [pc, #152]	; (40141c <Reset_Handler+0xa0>)
  401384:	429a      	cmp	r2, r3
  401386:	d010      	beq.n	4013aa <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401388:	4b25      	ldr	r3, [pc, #148]	; (401420 <Reset_Handler+0xa4>)
  40138a:	4a23      	ldr	r2, [pc, #140]	; (401418 <Reset_Handler+0x9c>)
  40138c:	429a      	cmp	r2, r3
  40138e:	d20c      	bcs.n	4013aa <Reset_Handler+0x2e>
  401390:	3b01      	subs	r3, #1
  401392:	1a9b      	subs	r3, r3, r2
  401394:	f023 0303 	bic.w	r3, r3, #3
  401398:	3304      	adds	r3, #4
  40139a:	4413      	add	r3, r2
  40139c:	491f      	ldr	r1, [pc, #124]	; (40141c <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  40139e:	f851 0b04 	ldr.w	r0, [r1], #4
  4013a2:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4013a6:	429a      	cmp	r2, r3
  4013a8:	d1f9      	bne.n	40139e <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4013aa:	4b1e      	ldr	r3, [pc, #120]	; (401424 <Reset_Handler+0xa8>)
  4013ac:	4a1e      	ldr	r2, [pc, #120]	; (401428 <Reset_Handler+0xac>)
  4013ae:	429a      	cmp	r2, r3
  4013b0:	d20a      	bcs.n	4013c8 <Reset_Handler+0x4c>
  4013b2:	3b01      	subs	r3, #1
  4013b4:	1a9b      	subs	r3, r3, r2
  4013b6:	f023 0303 	bic.w	r3, r3, #3
  4013ba:	3304      	adds	r3, #4
  4013bc:	4413      	add	r3, r2
                *pDest++ = 0;
  4013be:	2100      	movs	r1, #0
  4013c0:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4013c4:	4293      	cmp	r3, r2
  4013c6:	d1fb      	bne.n	4013c0 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4013c8:	4a18      	ldr	r2, [pc, #96]	; (40142c <Reset_Handler+0xb0>)
  4013ca:	4b19      	ldr	r3, [pc, #100]	; (401430 <Reset_Handler+0xb4>)
  4013cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4013d0:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4013d2:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4013d6:	fab3 f383 	clz	r3, r3
  4013da:	095b      	lsrs	r3, r3, #5
  4013dc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4013de:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4013e0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4013e4:	2200      	movs	r2, #0
  4013e6:	4b13      	ldr	r3, [pc, #76]	; (401434 <Reset_Handler+0xb8>)
  4013e8:	701a      	strb	r2, [r3, #0]
	return flags;
  4013ea:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4013ec:	4a12      	ldr	r2, [pc, #72]	; (401438 <Reset_Handler+0xbc>)
  4013ee:	6813      	ldr	r3, [r2, #0]
  4013f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4013f4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4013f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4013fa:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4013fe:	b129      	cbz	r1, 40140c <Reset_Handler+0x90>
		cpu_irq_enable();
  401400:	2201      	movs	r2, #1
  401402:	4b0c      	ldr	r3, [pc, #48]	; (401434 <Reset_Handler+0xb8>)
  401404:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401406:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40140a:	b662      	cpsie	i
        __libc_init_array();
  40140c:	4b0b      	ldr	r3, [pc, #44]	; (40143c <Reset_Handler+0xc0>)
  40140e:	4798      	blx	r3
        main();
  401410:	4b0b      	ldr	r3, [pc, #44]	; (401440 <Reset_Handler+0xc4>)
  401412:	4798      	blx	r3
  401414:	e7fe      	b.n	401414 <Reset_Handler+0x98>
  401416:	bf00      	nop
  401418:	20400000 	.word	0x20400000
  40141c:	00402e28 	.word	0x00402e28
  401420:	2040044c 	.word	0x2040044c
  401424:	2040071c 	.word	0x2040071c
  401428:	2040044c 	.word	0x2040044c
  40142c:	e000ed00 	.word	0xe000ed00
  401430:	00400000 	.word	0x00400000
  401434:	20400018 	.word	0x20400018
  401438:	e000ed88 	.word	0xe000ed88
  40143c:	00402219 	.word	0x00402219
  401440:	00401b55 	.word	0x00401b55

00401444 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401444:	4b3b      	ldr	r3, [pc, #236]	; (401534 <SystemCoreClockUpdate+0xf0>)
  401446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401448:	f003 0303 	and.w	r3, r3, #3
  40144c:	2b01      	cmp	r3, #1
  40144e:	d01d      	beq.n	40148c <SystemCoreClockUpdate+0x48>
  401450:	b183      	cbz	r3, 401474 <SystemCoreClockUpdate+0x30>
  401452:	2b02      	cmp	r3, #2
  401454:	d036      	beq.n	4014c4 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401456:	4b37      	ldr	r3, [pc, #220]	; (401534 <SystemCoreClockUpdate+0xf0>)
  401458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40145a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40145e:	2b70      	cmp	r3, #112	; 0x70
  401460:	d05f      	beq.n	401522 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401462:	4b34      	ldr	r3, [pc, #208]	; (401534 <SystemCoreClockUpdate+0xf0>)
  401464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401466:	4934      	ldr	r1, [pc, #208]	; (401538 <SystemCoreClockUpdate+0xf4>)
  401468:	f3c2 1202 	ubfx	r2, r2, #4, #3
  40146c:	680b      	ldr	r3, [r1, #0]
  40146e:	40d3      	lsrs	r3, r2
  401470:	600b      	str	r3, [r1, #0]
  401472:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401474:	4b31      	ldr	r3, [pc, #196]	; (40153c <SystemCoreClockUpdate+0xf8>)
  401476:	695b      	ldr	r3, [r3, #20]
  401478:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40147c:	bf14      	ite	ne
  40147e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401482:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401486:	4b2c      	ldr	r3, [pc, #176]	; (401538 <SystemCoreClockUpdate+0xf4>)
  401488:	601a      	str	r2, [r3, #0]
  40148a:	e7e4      	b.n	401456 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40148c:	4b29      	ldr	r3, [pc, #164]	; (401534 <SystemCoreClockUpdate+0xf0>)
  40148e:	6a1b      	ldr	r3, [r3, #32]
  401490:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401494:	d003      	beq.n	40149e <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401496:	4a2a      	ldr	r2, [pc, #168]	; (401540 <SystemCoreClockUpdate+0xfc>)
  401498:	4b27      	ldr	r3, [pc, #156]	; (401538 <SystemCoreClockUpdate+0xf4>)
  40149a:	601a      	str	r2, [r3, #0]
  40149c:	e7db      	b.n	401456 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40149e:	4a29      	ldr	r2, [pc, #164]	; (401544 <SystemCoreClockUpdate+0x100>)
  4014a0:	4b25      	ldr	r3, [pc, #148]	; (401538 <SystemCoreClockUpdate+0xf4>)
  4014a2:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4014a4:	4b23      	ldr	r3, [pc, #140]	; (401534 <SystemCoreClockUpdate+0xf0>)
  4014a6:	6a1b      	ldr	r3, [r3, #32]
  4014a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4014ac:	2b10      	cmp	r3, #16
  4014ae:	d005      	beq.n	4014bc <SystemCoreClockUpdate+0x78>
  4014b0:	2b20      	cmp	r3, #32
  4014b2:	d1d0      	bne.n	401456 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4014b4:	4a22      	ldr	r2, [pc, #136]	; (401540 <SystemCoreClockUpdate+0xfc>)
  4014b6:	4b20      	ldr	r3, [pc, #128]	; (401538 <SystemCoreClockUpdate+0xf4>)
  4014b8:	601a      	str	r2, [r3, #0]
          break;
  4014ba:	e7cc      	b.n	401456 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4014bc:	4a22      	ldr	r2, [pc, #136]	; (401548 <SystemCoreClockUpdate+0x104>)
  4014be:	4b1e      	ldr	r3, [pc, #120]	; (401538 <SystemCoreClockUpdate+0xf4>)
  4014c0:	601a      	str	r2, [r3, #0]
          break;
  4014c2:	e7c8      	b.n	401456 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4014c4:	4b1b      	ldr	r3, [pc, #108]	; (401534 <SystemCoreClockUpdate+0xf0>)
  4014c6:	6a1b      	ldr	r3, [r3, #32]
  4014c8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4014cc:	d016      	beq.n	4014fc <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4014ce:	4a1c      	ldr	r2, [pc, #112]	; (401540 <SystemCoreClockUpdate+0xfc>)
  4014d0:	4b19      	ldr	r3, [pc, #100]	; (401538 <SystemCoreClockUpdate+0xf4>)
  4014d2:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4014d4:	4b17      	ldr	r3, [pc, #92]	; (401534 <SystemCoreClockUpdate+0xf0>)
  4014d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4014d8:	f003 0303 	and.w	r3, r3, #3
  4014dc:	2b02      	cmp	r3, #2
  4014de:	d1ba      	bne.n	401456 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4014e0:	4a14      	ldr	r2, [pc, #80]	; (401534 <SystemCoreClockUpdate+0xf0>)
  4014e2:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4014e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4014e6:	4814      	ldr	r0, [pc, #80]	; (401538 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4014e8:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4014ec:	6803      	ldr	r3, [r0, #0]
  4014ee:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4014f2:	b2d2      	uxtb	r2, r2
  4014f4:	fbb3 f3f2 	udiv	r3, r3, r2
  4014f8:	6003      	str	r3, [r0, #0]
  4014fa:	e7ac      	b.n	401456 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4014fc:	4a11      	ldr	r2, [pc, #68]	; (401544 <SystemCoreClockUpdate+0x100>)
  4014fe:	4b0e      	ldr	r3, [pc, #56]	; (401538 <SystemCoreClockUpdate+0xf4>)
  401500:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401502:	4b0c      	ldr	r3, [pc, #48]	; (401534 <SystemCoreClockUpdate+0xf0>)
  401504:	6a1b      	ldr	r3, [r3, #32]
  401506:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40150a:	2b10      	cmp	r3, #16
  40150c:	d005      	beq.n	40151a <SystemCoreClockUpdate+0xd6>
  40150e:	2b20      	cmp	r3, #32
  401510:	d1e0      	bne.n	4014d4 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401512:	4a0b      	ldr	r2, [pc, #44]	; (401540 <SystemCoreClockUpdate+0xfc>)
  401514:	4b08      	ldr	r3, [pc, #32]	; (401538 <SystemCoreClockUpdate+0xf4>)
  401516:	601a      	str	r2, [r3, #0]
          break;
  401518:	e7dc      	b.n	4014d4 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40151a:	4a0b      	ldr	r2, [pc, #44]	; (401548 <SystemCoreClockUpdate+0x104>)
  40151c:	4b06      	ldr	r3, [pc, #24]	; (401538 <SystemCoreClockUpdate+0xf4>)
  40151e:	601a      	str	r2, [r3, #0]
          break;
  401520:	e7d8      	b.n	4014d4 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401522:	4a05      	ldr	r2, [pc, #20]	; (401538 <SystemCoreClockUpdate+0xf4>)
  401524:	6813      	ldr	r3, [r2, #0]
  401526:	4909      	ldr	r1, [pc, #36]	; (40154c <SystemCoreClockUpdate+0x108>)
  401528:	fba1 1303 	umull	r1, r3, r1, r3
  40152c:	085b      	lsrs	r3, r3, #1
  40152e:	6013      	str	r3, [r2, #0]
  401530:	4770      	bx	lr
  401532:	bf00      	nop
  401534:	400e0600 	.word	0x400e0600
  401538:	2040001c 	.word	0x2040001c
  40153c:	400e1810 	.word	0x400e1810
  401540:	00b71b00 	.word	0x00b71b00
  401544:	003d0900 	.word	0x003d0900
  401548:	007a1200 	.word	0x007a1200
  40154c:	aaaaaaab 	.word	0xaaaaaaab

00401550 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401550:	4b16      	ldr	r3, [pc, #88]	; (4015ac <system_init_flash+0x5c>)
  401552:	4298      	cmp	r0, r3
  401554:	d913      	bls.n	40157e <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401556:	4b16      	ldr	r3, [pc, #88]	; (4015b0 <system_init_flash+0x60>)
  401558:	4298      	cmp	r0, r3
  40155a:	d915      	bls.n	401588 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  40155c:	4b15      	ldr	r3, [pc, #84]	; (4015b4 <system_init_flash+0x64>)
  40155e:	4298      	cmp	r0, r3
  401560:	d916      	bls.n	401590 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401562:	4b15      	ldr	r3, [pc, #84]	; (4015b8 <system_init_flash+0x68>)
  401564:	4298      	cmp	r0, r3
  401566:	d917      	bls.n	401598 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401568:	4b14      	ldr	r3, [pc, #80]	; (4015bc <system_init_flash+0x6c>)
  40156a:	4298      	cmp	r0, r3
  40156c:	d918      	bls.n	4015a0 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40156e:	4b14      	ldr	r3, [pc, #80]	; (4015c0 <system_init_flash+0x70>)
  401570:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401572:	bf94      	ite	ls
  401574:	4a13      	ldrls	r2, [pc, #76]	; (4015c4 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401576:	4a14      	ldrhi	r2, [pc, #80]	; (4015c8 <system_init_flash+0x78>)
  401578:	4b14      	ldr	r3, [pc, #80]	; (4015cc <system_init_flash+0x7c>)
  40157a:	601a      	str	r2, [r3, #0]
  40157c:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40157e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401582:	4b12      	ldr	r3, [pc, #72]	; (4015cc <system_init_flash+0x7c>)
  401584:	601a      	str	r2, [r3, #0]
  401586:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401588:	4a11      	ldr	r2, [pc, #68]	; (4015d0 <system_init_flash+0x80>)
  40158a:	4b10      	ldr	r3, [pc, #64]	; (4015cc <system_init_flash+0x7c>)
  40158c:	601a      	str	r2, [r3, #0]
  40158e:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401590:	4a10      	ldr	r2, [pc, #64]	; (4015d4 <system_init_flash+0x84>)
  401592:	4b0e      	ldr	r3, [pc, #56]	; (4015cc <system_init_flash+0x7c>)
  401594:	601a      	str	r2, [r3, #0]
  401596:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401598:	4a0f      	ldr	r2, [pc, #60]	; (4015d8 <system_init_flash+0x88>)
  40159a:	4b0c      	ldr	r3, [pc, #48]	; (4015cc <system_init_flash+0x7c>)
  40159c:	601a      	str	r2, [r3, #0]
  40159e:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4015a0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4015a4:	4b09      	ldr	r3, [pc, #36]	; (4015cc <system_init_flash+0x7c>)
  4015a6:	601a      	str	r2, [r3, #0]
  4015a8:	4770      	bx	lr
  4015aa:	bf00      	nop
  4015ac:	015ef3bf 	.word	0x015ef3bf
  4015b0:	02bde77f 	.word	0x02bde77f
  4015b4:	041cdb3f 	.word	0x041cdb3f
  4015b8:	057bceff 	.word	0x057bceff
  4015bc:	06dac2bf 	.word	0x06dac2bf
  4015c0:	0839b67f 	.word	0x0839b67f
  4015c4:	04000500 	.word	0x04000500
  4015c8:	04000600 	.word	0x04000600
  4015cc:	400e0c00 	.word	0x400e0c00
  4015d0:	04000100 	.word	0x04000100
  4015d4:	04000200 	.word	0x04000200
  4015d8:	04000300 	.word	0x04000300

004015dc <but_callback_1>:
/* Handlers                                                             */
/************************************************************************/

void but_callback_1(void)
{
	if (but_flag_1 == 1) {
  4015dc:	4b04      	ldr	r3, [pc, #16]	; (4015f0 <but_callback_1+0x14>)
  4015de:	781b      	ldrb	r3, [r3, #0]
  4015e0:	b2db      	uxtb	r3, r3
  4015e2:	2b01      	cmp	r3, #1
		but_flag_1 = 0;
  4015e4:	bf0c      	ite	eq
  4015e6:	2200      	moveq	r2, #0
		} else {
		but_flag_1 = 1;
  4015e8:	2201      	movne	r2, #1
  4015ea:	4b01      	ldr	r3, [pc, #4]	; (4015f0 <but_callback_1+0x14>)
  4015ec:	701a      	strb	r2, [r3, #0]
  4015ee:	4770      	bx	lr
  4015f0:	204006ec 	.word	0x204006ec

004015f4 <but_callback_2>:
	}
}

void but_callback_2(void)
{
	if (but_flag_2 == 1) {
  4015f4:	4b04      	ldr	r3, [pc, #16]	; (401608 <but_callback_2+0x14>)
  4015f6:	781b      	ldrb	r3, [r3, #0]
  4015f8:	b2db      	uxtb	r3, r3
  4015fa:	2b01      	cmp	r3, #1
		but_flag_2 = 0;
  4015fc:	bf0c      	ite	eq
  4015fe:	2200      	moveq	r2, #0
		} else {
		but_flag_2 = 1;
  401600:	2201      	movne	r2, #1
  401602:	4b01      	ldr	r3, [pc, #4]	; (401608 <but_callback_2+0x14>)
  401604:	701a      	strb	r2, [r3, #0]
  401606:	4770      	bx	lr
  401608:	204006ed 	.word	0x204006ed

0040160c <but_callback_3>:
	}
}

void but_callback_3(void)
{
	if (but_flag_3 == 1) {
  40160c:	4b04      	ldr	r3, [pc, #16]	; (401620 <but_callback_3+0x14>)
  40160e:	781b      	ldrb	r3, [r3, #0]
  401610:	b2db      	uxtb	r3, r3
  401612:	2b01      	cmp	r3, #1
		but_flag_3 = 0;
  401614:	bf0c      	ite	eq
  401616:	2200      	moveq	r2, #0
	} else {
		but_flag_3 = 1;
  401618:	2201      	movne	r2, #1
  40161a:	4b01      	ldr	r3, [pc, #4]	; (401620 <but_callback_3+0x14>)
  40161c:	701a      	strb	r2, [r3, #0]
  40161e:	4770      	bx	lr
  401620:	204006f4 	.word	0x204006f4

00401624 <get_time_rtt>:
	pio_clear(pio, mask);
	else
	pio_set(pio,mask);
}

static float get_time_rtt(){
  401624:	b508      	push	{r3, lr}
	uint ul_previous_time = rtt_read_timer_value(RTT);
  401626:	4804      	ldr	r0, [pc, #16]	; (401638 <get_time_rtt+0x14>)
  401628:	4b04      	ldr	r3, [pc, #16]	; (40163c <get_time_rtt+0x18>)
  40162a:	4798      	blx	r3
	return ul_previous_time;
}
  40162c:	ee07 0a90 	vmov	s15, r0
  401630:	eeb8 0a67 	vcvt.f32.u32	s0, s15
  401634:	bd08      	pop	{r3, pc}
  401636:	bf00      	nop
  401638:	400e1830 	.word	0x400e1830
  40163c:	00400381 	.word	0x00400381

00401640 <TC0_Handler>:
void TC0_Handler(void){
  401640:	b500      	push	{lr}
  401642:	b083      	sub	sp, #12
	ul_dummy = tc_get_status(TC0, 0);
  401644:	2100      	movs	r1, #0
  401646:	4805      	ldr	r0, [pc, #20]	; (40165c <TC0_Handler+0x1c>)
  401648:	4b05      	ldr	r3, [pc, #20]	; (401660 <TC0_Handler+0x20>)
  40164a:	4798      	blx	r3
  40164c:	9001      	str	r0, [sp, #4]
	UNUSED(ul_dummy);
  40164e:	9b01      	ldr	r3, [sp, #4]
	flag_tc_led1 = 1;
  401650:	2201      	movs	r2, #1
  401652:	4b04      	ldr	r3, [pc, #16]	; (401664 <TC0_Handler+0x24>)
  401654:	701a      	strb	r2, [r3, #0]
}
  401656:	b003      	add	sp, #12
  401658:	f85d fb04 	ldr.w	pc, [sp], #4
  40165c:	4000c000 	.word	0x4000c000
  401660:	00400559 	.word	0x00400559
  401664:	204006e6 	.word	0x204006e6

00401668 <TC3_Handler>:
void TC3_Handler(void){
  401668:	b500      	push	{lr}
  40166a:	b083      	sub	sp, #12
	ul_dummy = tc_get_status(TC1, 0);
  40166c:	2100      	movs	r1, #0
  40166e:	4805      	ldr	r0, [pc, #20]	; (401684 <TC3_Handler+0x1c>)
  401670:	4b05      	ldr	r3, [pc, #20]	; (401688 <TC3_Handler+0x20>)
  401672:	4798      	blx	r3
  401674:	9001      	str	r0, [sp, #4]
	UNUSED(ul_dummy);
  401676:	9b01      	ldr	r3, [sp, #4]
	flag_tc_led2 = 1;
  401678:	2201      	movs	r2, #1
  40167a:	4b04      	ldr	r3, [pc, #16]	; (40168c <TC3_Handler+0x24>)
  40167c:	701a      	strb	r2, [r3, #0]
}
  40167e:	b003      	add	sp, #12
  401680:	f85d fb04 	ldr.w	pc, [sp], #4
  401684:	40010000 	.word	0x40010000
  401688:	00400559 	.word	0x00400559
  40168c:	204006e7 	.word	0x204006e7

00401690 <TC6_Handler>:
void TC6_Handler(void){
  401690:	b500      	push	{lr}
  401692:	b083      	sub	sp, #12
	ul_dummy = tc_get_status(TC2, 0);
  401694:	2100      	movs	r1, #0
  401696:	4805      	ldr	r0, [pc, #20]	; (4016ac <TC6_Handler+0x1c>)
  401698:	4b05      	ldr	r3, [pc, #20]	; (4016b0 <TC6_Handler+0x20>)
  40169a:	4798      	blx	r3
  40169c:	9001      	str	r0, [sp, #4]
	UNUSED(ul_dummy);
  40169e:	9b01      	ldr	r3, [sp, #4]
	flag_tc_led3 = 1;
  4016a0:	2201      	movs	r2, #1
  4016a2:	4b04      	ldr	r3, [pc, #16]	; (4016b4 <TC6_Handler+0x24>)
  4016a4:	701a      	strb	r2, [r3, #0]
}
  4016a6:	b003      	add	sp, #12
  4016a8:	f85d fb04 	ldr.w	pc, [sp], #4
  4016ac:	40014000 	.word	0x40014000
  4016b0:	00400559 	.word	0x00400559
  4016b4:	204006e8 	.word	0x204006e8

004016b8 <RTT_Handler>:
{
  4016b8:	b508      	push	{r3, lr}
	ul_status = rtt_get_status(RTT);
  4016ba:	4805      	ldr	r0, [pc, #20]	; (4016d0 <RTT_Handler+0x18>)
  4016bc:	4b05      	ldr	r3, [pc, #20]	; (4016d4 <RTT_Handler+0x1c>)
  4016be:	4798      	blx	r3
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  4016c0:	f010 0f01 	tst.w	r0, #1
  4016c4:	d002      	beq.n	4016cc <RTT_Handler+0x14>
		f_rtt_alarme = true;                  // flag RTT alarme
  4016c6:	2201      	movs	r2, #1
  4016c8:	4b03      	ldr	r3, [pc, #12]	; (4016d8 <RTT_Handler+0x20>)
  4016ca:	701a      	strb	r2, [r3, #0]
  4016cc:	bd08      	pop	{r3, pc}
  4016ce:	bf00      	nop
  4016d0:	400e1830 	.word	0x400e1830
  4016d4:	00400395 	.word	0x00400395
  4016d8:	204006e4 	.word	0x204006e4

004016dc <RTC_Handler>:
{
  4016dc:	b538      	push	{r3, r4, r5, lr}
	uint32_t ul_status = rtc_get_status(RTC);
  4016de:	4813      	ldr	r0, [pc, #76]	; (40172c <RTC_Handler+0x50>)
  4016e0:	4b13      	ldr	r3, [pc, #76]	; (401730 <RTC_Handler+0x54>)
  4016e2:	4798      	blx	r3
  4016e4:	4604      	mov	r4, r0
	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) {
  4016e6:	f010 0f04 	tst.w	r0, #4
  4016ea:	d111      	bne.n	401710 <RTC_Handler+0x34>
	if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM) {
  4016ec:	f014 0f02 	tst.w	r4, #2
  4016f0:	d113      	bne.n	40171a <RTC_Handler+0x3e>
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  4016f2:	4d0e      	ldr	r5, [pc, #56]	; (40172c <RTC_Handler+0x50>)
  4016f4:	2101      	movs	r1, #1
  4016f6:	4628      	mov	r0, r5
  4016f8:	4c0e      	ldr	r4, [pc, #56]	; (401734 <RTC_Handler+0x58>)
  4016fa:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  4016fc:	2108      	movs	r1, #8
  4016fe:	4628      	mov	r0, r5
  401700:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  401702:	2110      	movs	r1, #16
  401704:	4628      	mov	r0, r5
  401706:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  401708:	2120      	movs	r1, #32
  40170a:	4628      	mov	r0, r5
  40170c:	47a0      	blx	r4
  40170e:	bd38      	pop	{r3, r4, r5, pc}
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  401710:	2104      	movs	r1, #4
  401712:	4806      	ldr	r0, [pc, #24]	; (40172c <RTC_Handler+0x50>)
  401714:	4b07      	ldr	r3, [pc, #28]	; (401734 <RTC_Handler+0x58>)
  401716:	4798      	blx	r3
  401718:	e7e8      	b.n	4016ec <RTC_Handler+0x10>
			rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  40171a:	2102      	movs	r1, #2
  40171c:	4803      	ldr	r0, [pc, #12]	; (40172c <RTC_Handler+0x50>)
  40171e:	4b05      	ldr	r3, [pc, #20]	; (401734 <RTC_Handler+0x58>)
  401720:	4798      	blx	r3
      flag_rtc = 1;
  401722:	2201      	movs	r2, #1
  401724:	4b04      	ldr	r3, [pc, #16]	; (401738 <RTC_Handler+0x5c>)
  401726:	701a      	strb	r2, [r3, #0]
  401728:	e7e3      	b.n	4016f2 <RTC_Handler+0x16>
  40172a:	bf00      	nop
  40172c:	400e1860 	.word	0x400e1860
  401730:	00400311 	.word	0x00400311
  401734:	00400315 	.word	0x00400315
  401738:	204006e5 	.word	0x204006e5

0040173c <init>:
void init(void){
  40173c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40173e:	b083      	sub	sp, #12
	sysclk_init();
  401740:	4b40      	ldr	r3, [pc, #256]	; (401844 <init+0x108>)
  401742:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS;
  401744:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401748:	4b3f      	ldr	r3, [pc, #252]	; (401848 <init+0x10c>)
  40174a:	605a      	str	r2, [r3, #4]
	pmc_enable_periph_clk(LED_PIO_ID_1);
  40174c:	200a      	movs	r0, #10
  40174e:	4d3f      	ldr	r5, [pc, #252]	; (40184c <init+0x110>)
  401750:	47a8      	blx	r5
	pio_configure(LED_PIO_1, PIO_OUTPUT_1, LED_IDX_MASK_1, PIO_DEFAULT);
  401752:	4f3f      	ldr	r7, [pc, #252]	; (401850 <init+0x114>)
  401754:	2300      	movs	r3, #0
  401756:	2201      	movs	r2, #1
  401758:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40175c:	4638      	mov	r0, r7
  40175e:	4c3d      	ldr	r4, [pc, #244]	; (401854 <init+0x118>)
  401760:	47a0      	blx	r4
	pmc_enable_periph_clk(LED_PIO_ID_2);
  401762:	200c      	movs	r0, #12
  401764:	47a8      	blx	r5
	pio_configure(LED_PIO_2, PIO_OUTPUT_0, LED_IDX_MASK_2, PIO_DEFAULT);
  401766:	4e3c      	ldr	r6, [pc, #240]	; (401858 <init+0x11c>)
  401768:	2300      	movs	r3, #0
  40176a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40176e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  401772:	4630      	mov	r0, r6
  401774:	47a0      	blx	r4
	pmc_enable_periph_clk(LED_PIO_ID_3);
  401776:	200b      	movs	r0, #11
  401778:	47a8      	blx	r5
	pio_configure(LED_PIO_3, PIO_OUTPUT_0, LED_IDX_MASK_3, PIO_DEFAULT);
  40177a:	2300      	movs	r3, #0
  40177c:	2204      	movs	r2, #4
  40177e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  401782:	4836      	ldr	r0, [pc, #216]	; (40185c <init+0x120>)
  401784:	47a0      	blx	r4
	pmc_enable_periph_clk(BUZZ_PIO_ID);
  401786:	200c      	movs	r0, #12
  401788:	47a8      	blx	r5
	pio_configure(BUZZ_PIO, PIO_OUTPUT_0, BUZZ_PIO_IDX_MASK, PIO_DEFAULT);
  40178a:	2300      	movs	r3, #0
  40178c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401790:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  401794:	4630      	mov	r0, r6
  401796:	47a0      	blx	r4
	pmc_enable_periph_clk(BUT_PIO_ID_1);
  401798:	2010      	movs	r0, #16
  40179a:	47a8      	blx	r5
	pmc_enable_periph_clk(BUT_PIO_ID_2);
  40179c:	200c      	movs	r0, #12
  40179e:	47a8      	blx	r5
	pmc_enable_periph_clk(BUT_PIO_ID_3);
  4017a0:	200a      	movs	r0, #10
  4017a2:	47a8      	blx	r5
	pio_configure(BUT_PIO_1, PIO_INPUT, BUT_IDX_MASK_1, PIO_PULLUP);
  4017a4:	4d2e      	ldr	r5, [pc, #184]	; (401860 <init+0x124>)
  4017a6:	2301      	movs	r3, #1
  4017a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4017ac:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4017b0:	4628      	mov	r0, r5
  4017b2:	47a0      	blx	r4
	pio_configure(BUT_PIO_2, PIO_INPUT, BUT_IDX_MASK_2, PIO_PULLUP);
  4017b4:	2301      	movs	r3, #1
  4017b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4017ba:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4017be:	4630      	mov	r0, r6
  4017c0:	47a0      	blx	r4
	pio_configure(BUT_PIO_3, PIO_INPUT, BUT_IDX_MASK_3, PIO_PULLUP);
  4017c2:	2301      	movs	r3, #1
  4017c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4017c8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4017cc:	4638      	mov	r0, r7
  4017ce:	47a0      	blx	r4
	pio_handler_set(BUT_PIO_1,
  4017d0:	4b24      	ldr	r3, [pc, #144]	; (401864 <init+0x128>)
  4017d2:	9300      	str	r3, [sp, #0]
  4017d4:	2370      	movs	r3, #112	; 0x70
  4017d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4017da:	2110      	movs	r1, #16
  4017dc:	4628      	mov	r0, r5
  4017de:	4c22      	ldr	r4, [pc, #136]	; (401868 <init+0x12c>)
  4017e0:	47a0      	blx	r4
	pio_handler_set(BUT_PIO_2,
  4017e2:	4b22      	ldr	r3, [pc, #136]	; (40186c <init+0x130>)
  4017e4:	9300      	str	r3, [sp, #0]
  4017e6:	2350      	movs	r3, #80	; 0x50
  4017e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4017ec:	210c      	movs	r1, #12
  4017ee:	4630      	mov	r0, r6
  4017f0:	47a0      	blx	r4
	pio_handler_set(BUT_PIO_3,
  4017f2:	4b1f      	ldr	r3, [pc, #124]	; (401870 <init+0x134>)
  4017f4:	9300      	str	r3, [sp, #0]
  4017f6:	2370      	movs	r3, #112	; 0x70
  4017f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4017fc:	210a      	movs	r1, #10
  4017fe:	4638      	mov	r0, r7
  401800:	47a0      	blx	r4
	pio_enable_interrupt(BUT_PIO_1, BUT_IDX_MASK_1);
  401802:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401806:	4628      	mov	r0, r5
  401808:	4c1a      	ldr	r4, [pc, #104]	; (401874 <init+0x138>)
  40180a:	47a0      	blx	r4
	pio_enable_interrupt(BUT_PIO_2, BUT_IDX_MASK_2);
  40180c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  401810:	4630      	mov	r0, r6
  401812:	47a0      	blx	r4
	pio_enable_interrupt(BUT_PIO_3, BUT_IDX_MASK_3);
  401814:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  401818:	4638      	mov	r0, r7
  40181a:	47a0      	blx	r4
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40181c:	4b16      	ldr	r3, [pc, #88]	; (401878 <init+0x13c>)
  40181e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401822:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401824:	2280      	movs	r2, #128	; 0x80
  401826:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40182a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40182e:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401830:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401834:	f44f 6180 	mov.w	r1, #1024	; 0x400
  401838:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40183a:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
}
  40183e:	b003      	add	sp, #12
  401840:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401842:	bf00      	nop
  401844:	00400d69 	.word	0x00400d69
  401848:	400e1850 	.word	0x400e1850
  40184c:	00401325 	.word	0x00401325
  401850:	400e0e00 	.word	0x400e0e00
  401854:	00401011 	.word	0x00401011
  401858:	400e1200 	.word	0x400e1200
  40185c:	400e1000 	.word	0x400e1000
  401860:	400e1400 	.word	0x400e1400
  401864:	004015dd 	.word	0x004015dd
  401868:	00401131 	.word	0x00401131
  40186c:	004015f5 	.word	0x004015f5
  401870:	0040160d 	.word	0x0040160d
  401874:	004010d3 	.word	0x004010d3
  401878:	e000e100 	.word	0xe000e100

0040187c <pisca_TC_1>:
void pisca_TC_1(int n, int t){
  40187c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for (int i=0;i<n;i++){
  401880:	f1b0 0800 	subs.w	r8, r0, #0
  401884:	dd30      	ble.n	4018e8 <pisca_TC_1+0x6c>
  401886:	460f      	mov	r7, r1
    delay_ms(t);
  401888:	17cd      	asrs	r5, r1, #31
  40188a:	4b18      	ldr	r3, [pc, #96]	; (4018ec <pisca_TC_1+0x70>)
  40188c:	fba1 0103 	umull	r0, r1, r1, r3
  401890:	fb03 1105 	mla	r1, r3, r5, r1
  401894:	f241 722c 	movw	r2, #5932	; 0x172c
  401898:	2300      	movs	r3, #0
  40189a:	f241 742b 	movw	r4, #5931	; 0x172b
  40189e:	2500      	movs	r5, #0
  4018a0:	1900      	adds	r0, r0, r4
  4018a2:	4169      	adcs	r1, r5
  4018a4:	4c12      	ldr	r4, [pc, #72]	; (4018f0 <pisca_TC_1+0x74>)
  4018a6:	47a0      	blx	r4
  4018a8:	4682      	mov	sl, r0
  4018aa:	2400      	movs	r4, #0
    pio_clear(LED_PIO_1, LED_IDX_MASK_1);
  4018ac:	4e11      	ldr	r6, [pc, #68]	; (4018f4 <pisca_TC_1+0x78>)
  4018ae:	f8df 9050 	ldr.w	r9, [pc, #80]	; 401900 <pisca_TC_1+0x84>
    delay_ms(t);
  4018b2:	4d11      	ldr	r5, [pc, #68]	; (4018f8 <pisca_TC_1+0x7c>)
  4018b4:	e00a      	b.n	4018cc <pisca_TC_1+0x50>
  4018b6:	2033      	movs	r0, #51	; 0x33
  4018b8:	47a8      	blx	r5
    pio_set(LED_PIO_1, LED_IDX_MASK_1);
  4018ba:	2101      	movs	r1, #1
  4018bc:	4630      	mov	r0, r6
  4018be:	4b0f      	ldr	r3, [pc, #60]	; (4018fc <pisca_TC_1+0x80>)
  4018c0:	4798      	blx	r3
    delay_ms(t);
  4018c2:	2033      	movs	r0, #51	; 0x33
  4018c4:	47a8      	blx	r5
  for (int i=0;i<n;i++){
  4018c6:	3401      	adds	r4, #1
  4018c8:	45a0      	cmp	r8, r4
  4018ca:	d00d      	beq.n	4018e8 <pisca_TC_1+0x6c>
    pio_clear(LED_PIO_1, LED_IDX_MASK_1);
  4018cc:	2101      	movs	r1, #1
  4018ce:	4630      	mov	r0, r6
  4018d0:	47c8      	blx	r9
    delay_ms(t);
  4018d2:	2f00      	cmp	r7, #0
  4018d4:	d0ef      	beq.n	4018b6 <pisca_TC_1+0x3a>
  4018d6:	4650      	mov	r0, sl
  4018d8:	47a8      	blx	r5
    pio_set(LED_PIO_1, LED_IDX_MASK_1);
  4018da:	2101      	movs	r1, #1
  4018dc:	4630      	mov	r0, r6
  4018de:	4b07      	ldr	r3, [pc, #28]	; (4018fc <pisca_TC_1+0x80>)
  4018e0:	4798      	blx	r3
    delay_ms(t);
  4018e2:	4650      	mov	r0, sl
  4018e4:	47a8      	blx	r5
  4018e6:	e7ee      	b.n	4018c6 <pisca_TC_1+0x4a>
  4018e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4018ec:	11e1a300 	.word	0x11e1a300
  4018f0:	00401f09 	.word	0x00401f09
  4018f4:	400e0e00 	.word	0x400e0e00
  4018f8:	20400001 	.word	0x20400001
  4018fc:	00400f19 	.word	0x00400f19
  401900:	00400f1d 	.word	0x00400f1d

00401904 <pisca_TC_2>:
void pisca_TC_2(int n, int t){
  401904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (int i=0;i<n;i++){
  401908:	f1b0 0800 	subs.w	r8, r0, #0
  40190c:	dd33      	ble.n	401976 <pisca_TC_2+0x72>
  40190e:	460f      	mov	r7, r1
		delay_ms(t);
  401910:	17cd      	asrs	r5, r1, #31
  401912:	4b1a      	ldr	r3, [pc, #104]	; (40197c <pisca_TC_2+0x78>)
  401914:	fba1 0103 	umull	r0, r1, r1, r3
  401918:	fb03 1105 	mla	r1, r3, r5, r1
  40191c:	f241 722c 	movw	r2, #5932	; 0x172c
  401920:	2300      	movs	r3, #0
  401922:	f241 742b 	movw	r4, #5931	; 0x172b
  401926:	2500      	movs	r5, #0
  401928:	1900      	adds	r0, r0, r4
  40192a:	4169      	adcs	r1, r5
  40192c:	4c14      	ldr	r4, [pc, #80]	; (401980 <pisca_TC_2+0x7c>)
  40192e:	47a0      	blx	r4
  401930:	4682      	mov	sl, r0
  401932:	2400      	movs	r4, #0
		pio_clear(LED_PIO_2, LED_IDX_MASK_2);
  401934:	4e13      	ldr	r6, [pc, #76]	; (401984 <pisca_TC_2+0x80>)
  401936:	f8df 9058 	ldr.w	r9, [pc, #88]	; 401990 <pisca_TC_2+0x8c>
		delay_ms(t);
  40193a:	4d13      	ldr	r5, [pc, #76]	; (401988 <pisca_TC_2+0x84>)
  40193c:	e00b      	b.n	401956 <pisca_TC_2+0x52>
  40193e:	2033      	movs	r0, #51	; 0x33
  401940:	47a8      	blx	r5
		pio_set(LED_PIO_2, LED_IDX_MASK_2);
  401942:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401946:	4630      	mov	r0, r6
  401948:	4b10      	ldr	r3, [pc, #64]	; (40198c <pisca_TC_2+0x88>)
  40194a:	4798      	blx	r3
		delay_ms(t);
  40194c:	2033      	movs	r0, #51	; 0x33
  40194e:	47a8      	blx	r5
	for (int i=0;i<n;i++){
  401950:	3401      	adds	r4, #1
  401952:	45a0      	cmp	r8, r4
  401954:	d00f      	beq.n	401976 <pisca_TC_2+0x72>
		pio_clear(LED_PIO_2, LED_IDX_MASK_2);
  401956:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40195a:	4630      	mov	r0, r6
  40195c:	47c8      	blx	r9
		delay_ms(t);
  40195e:	2f00      	cmp	r7, #0
  401960:	d0ed      	beq.n	40193e <pisca_TC_2+0x3a>
  401962:	4650      	mov	r0, sl
  401964:	47a8      	blx	r5
		pio_set(LED_PIO_2, LED_IDX_MASK_2);
  401966:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40196a:	4630      	mov	r0, r6
  40196c:	4b07      	ldr	r3, [pc, #28]	; (40198c <pisca_TC_2+0x88>)
  40196e:	4798      	blx	r3
		delay_ms(t);
  401970:	4650      	mov	r0, sl
  401972:	47a8      	blx	r5
  401974:	e7ec      	b.n	401950 <pisca_TC_2+0x4c>
  401976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40197a:	bf00      	nop
  40197c:	11e1a300 	.word	0x11e1a300
  401980:	00401f09 	.word	0x00401f09
  401984:	400e1200 	.word	0x400e1200
  401988:	20400001 	.word	0x20400001
  40198c:	00400f19 	.word	0x00400f19
  401990:	00400f1d 	.word	0x00400f1d

00401994 <pisca_TC_3>:
void pisca_TC_3(int n, int t){
  401994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (int i=0;i<n;i++){
  401998:	f1b0 0800 	subs.w	r8, r0, #0
  40199c:	dd30      	ble.n	401a00 <pisca_TC_3+0x6c>
  40199e:	460f      	mov	r7, r1
		delay_ms(t);
  4019a0:	17cd      	asrs	r5, r1, #31
  4019a2:	4b18      	ldr	r3, [pc, #96]	; (401a04 <pisca_TC_3+0x70>)
  4019a4:	fba1 0103 	umull	r0, r1, r1, r3
  4019a8:	fb03 1105 	mla	r1, r3, r5, r1
  4019ac:	f241 722c 	movw	r2, #5932	; 0x172c
  4019b0:	2300      	movs	r3, #0
  4019b2:	f241 742b 	movw	r4, #5931	; 0x172b
  4019b6:	2500      	movs	r5, #0
  4019b8:	1900      	adds	r0, r0, r4
  4019ba:	4169      	adcs	r1, r5
  4019bc:	4c12      	ldr	r4, [pc, #72]	; (401a08 <pisca_TC_3+0x74>)
  4019be:	47a0      	blx	r4
  4019c0:	4682      	mov	sl, r0
  4019c2:	2400      	movs	r4, #0
		pio_clear(LED_PIO_3, LED_IDX_MASK_3);
  4019c4:	4e11      	ldr	r6, [pc, #68]	; (401a0c <pisca_TC_3+0x78>)
  4019c6:	f8df 9050 	ldr.w	r9, [pc, #80]	; 401a18 <pisca_TC_3+0x84>
		delay_ms(t);
  4019ca:	4d11      	ldr	r5, [pc, #68]	; (401a10 <pisca_TC_3+0x7c>)
  4019cc:	e00a      	b.n	4019e4 <pisca_TC_3+0x50>
  4019ce:	2033      	movs	r0, #51	; 0x33
  4019d0:	47a8      	blx	r5
		pio_set(LED_PIO_3, LED_IDX_MASK_3);
  4019d2:	2104      	movs	r1, #4
  4019d4:	4630      	mov	r0, r6
  4019d6:	4b0f      	ldr	r3, [pc, #60]	; (401a14 <pisca_TC_3+0x80>)
  4019d8:	4798      	blx	r3
		delay_ms(t);
  4019da:	2033      	movs	r0, #51	; 0x33
  4019dc:	47a8      	blx	r5
	for (int i=0;i<n;i++){
  4019de:	3401      	adds	r4, #1
  4019e0:	45a0      	cmp	r8, r4
  4019e2:	d00d      	beq.n	401a00 <pisca_TC_3+0x6c>
		pio_clear(LED_PIO_3, LED_IDX_MASK_3);
  4019e4:	2104      	movs	r1, #4
  4019e6:	4630      	mov	r0, r6
  4019e8:	47c8      	blx	r9
		delay_ms(t);
  4019ea:	2f00      	cmp	r7, #0
  4019ec:	d0ef      	beq.n	4019ce <pisca_TC_3+0x3a>
  4019ee:	4650      	mov	r0, sl
  4019f0:	47a8      	blx	r5
		pio_set(LED_PIO_3, LED_IDX_MASK_3);
  4019f2:	2104      	movs	r1, #4
  4019f4:	4630      	mov	r0, r6
  4019f6:	4b07      	ldr	r3, [pc, #28]	; (401a14 <pisca_TC_3+0x80>)
  4019f8:	4798      	blx	r3
		delay_ms(t);
  4019fa:	4650      	mov	r0, sl
  4019fc:	47a8      	blx	r5
  4019fe:	e7ee      	b.n	4019de <pisca_TC_3+0x4a>
  401a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401a04:	11e1a300 	.word	0x11e1a300
  401a08:	00401f09 	.word	0x00401f09
  401a0c:	400e1000 	.word	0x400e1000
  401a10:	20400001 	.word	0x20400001
  401a14:	00400f19 	.word	0x00400f19
  401a18:	00400f1d 	.word	0x00400f1d

00401a1c <TC_init>:

/**
* Configura TimerCounter (TC) para gerar uma interrupcao no canal (ID_TC e TC_CHANNEL)
* na taxa de especificada em freq.
*/
void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  401a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401a20:	b085      	sub	sp, #20
  401a22:	4606      	mov	r6, r0
  401a24:	460c      	mov	r4, r1
  401a26:	4617      	mov	r7, r2
  401a28:	4698      	mov	r8, r3
	o uC possui 3 TCs, cada TC possui 3 canais
	TC0 : ID_TC0, ID_TC1, ID_TC2
	TC1 : ID_TC3, ID_TC4, ID_TC5
	TC2 : ID_TC6, ID_TC7, ID_TC8
	*/
	pmc_enable_periph_clk(ID_TC);
  401a2a:	4608      	mov	r0, r1
  401a2c:	4b18      	ldr	r3, [pc, #96]	; (401a90 <TC_init+0x74>)
  401a2e:	4798      	blx	r3

	/** Configura o TC para operar em  4Mhz e interrup?c?o no RC compare */
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  401a30:	4d18      	ldr	r5, [pc, #96]	; (401a94 <TC_init+0x78>)
  401a32:	9500      	str	r5, [sp, #0]
  401a34:	ab02      	add	r3, sp, #8
  401a36:	aa03      	add	r2, sp, #12
  401a38:	4629      	mov	r1, r5
  401a3a:	4640      	mov	r0, r8
  401a3c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 401aac <TC_init+0x90>
  401a40:	47c8      	blx	r9
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  401a42:	9a02      	ldr	r2, [sp, #8]
  401a44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401a48:	4639      	mov	r1, r7
  401a4a:	4630      	mov	r0, r6
  401a4c:	4b12      	ldr	r3, [pc, #72]	; (401a98 <TC_init+0x7c>)
  401a4e:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  401a50:	9a03      	ldr	r2, [sp, #12]
  401a52:	fbb5 f2f2 	udiv	r2, r5, r2
  401a56:	fbb2 f2f8 	udiv	r2, r2, r8
  401a5a:	4639      	mov	r1, r7
  401a5c:	4630      	mov	r0, r6
  401a5e:	4b0f      	ldr	r3, [pc, #60]	; (401a9c <TC_init+0x80>)
  401a60:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401a62:	b263      	sxtb	r3, r4
  401a64:	095b      	lsrs	r3, r3, #5
  401a66:	f004 041f 	and.w	r4, r4, #31
  401a6a:	2201      	movs	r2, #1
  401a6c:	fa02 f404 	lsl.w	r4, r2, r4
  401a70:	4a0b      	ldr	r2, [pc, #44]	; (401aa0 <TC_init+0x84>)
  401a72:	f842 4023 	str.w	r4, [r2, r3, lsl #2]

	/* Configura e ativa interrup?c?o no TC canal 0 */
	/* Interrup??o no C */
	NVIC_EnableIRQ((IRQn_Type) ID_TC);
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  401a76:	2210      	movs	r2, #16
  401a78:	4639      	mov	r1, r7
  401a7a:	4630      	mov	r0, r6
  401a7c:	4b09      	ldr	r3, [pc, #36]	; (401aa4 <TC_init+0x88>)
  401a7e:	4798      	blx	r3

	/* Inicializa o canal 0 do TC */
	tc_start(TC, TC_CHANNEL);
  401a80:	4639      	mov	r1, r7
  401a82:	4630      	mov	r0, r6
  401a84:	4b08      	ldr	r3, [pc, #32]	; (401aa8 <TC_init+0x8c>)
  401a86:	4798      	blx	r3
}
  401a88:	b005      	add	sp, #20
  401a8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401a8e:	bf00      	nop
  401a90:	00401325 	.word	0x00401325
  401a94:	11e1a300 	.word	0x11e1a300
  401a98:	00400527 	.word	0x00400527
  401a9c:	00400549 	.word	0x00400549
  401aa0:	e000e100 	.word	0xe000e100
  401aa4:	00400551 	.word	0x00400551
  401aa8:	00400541 	.word	0x00400541
  401aac:	00400561 	.word	0x00400561

00401ab0 <RTC_init>:

// RTC
/**
* Configura o RTC para funcionar com interrupcao de alarme
*/
void RTC_init(Rtc *rtc, uint32_t id_rtc, calendar t, uint32_t irq_type){
  401ab0:	b082      	sub	sp, #8
  401ab2:	b570      	push	{r4, r5, r6, lr}
  401ab4:	b082      	sub	sp, #8
  401ab6:	4605      	mov	r5, r0
  401ab8:	460c      	mov	r4, r1
  401aba:	a906      	add	r1, sp, #24
  401abc:	e881 000c 	stmia.w	r1, {r2, r3}
	/* Configura o PMC */
	pmc_enable_periph_clk(ID_RTC);
  401ac0:	2002      	movs	r0, #2
  401ac2:	4b1d      	ldr	r3, [pc, #116]	; (401b38 <RTC_init+0x88>)
  401ac4:	4798      	blx	r3

	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(rtc, 0);
  401ac6:	2100      	movs	r1, #0
  401ac8:	4628      	mov	r0, r5
  401aca:	4b1c      	ldr	r3, [pc, #112]	; (401b3c <RTC_init+0x8c>)
  401acc:	4798      	blx	r3

	/* Configura data e hora manualmente */
	rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  401ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401ad0:	9300      	str	r3, [sp, #0]
  401ad2:	9b08      	ldr	r3, [sp, #32]
  401ad4:	9a07      	ldr	r2, [sp, #28]
  401ad6:	9906      	ldr	r1, [sp, #24]
  401ad8:	4628      	mov	r0, r5
  401ada:	4e19      	ldr	r6, [pc, #100]	; (401b40 <RTC_init+0x90>)
  401adc:	47b0      	blx	r6
	rtc_set_time(rtc, t.hour, t.minute, t.seccond);
  401ade:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401ae0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  401ae2:	990a      	ldr	r1, [sp, #40]	; 0x28
  401ae4:	4628      	mov	r0, r5
  401ae6:	4e17      	ldr	r6, [pc, #92]	; (401b44 <RTC_init+0x94>)
  401ae8:	47b0      	blx	r6

	/* Configure RTC interrupts */
	NVIC_DisableIRQ(id_rtc);
  401aea:	b262      	sxtb	r2, r4
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401aec:	b2e4      	uxtb	r4, r4
  401aee:	f004 011f 	and.w	r1, r4, #31
  401af2:	2301      	movs	r3, #1
  401af4:	408b      	lsls	r3, r1
  401af6:	0956      	lsrs	r6, r2, #5
  401af8:	4813      	ldr	r0, [pc, #76]	; (401b48 <RTC_init+0x98>)
  401afa:	eb00 0186 	add.w	r1, r0, r6, lsl #2
  401afe:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401b02:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
  if(IRQn < 0) {
  401b06:	2a00      	cmp	r2, #0
  401b08:	db0f      	blt.n	401b2a <RTC_init+0x7a>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401b0a:	490f      	ldr	r1, [pc, #60]	; (401b48 <RTC_init+0x98>)
  401b0c:	4411      	add	r1, r2
  401b0e:	2200      	movs	r2, #0
  401b10:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401b14:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
	NVIC_ClearPendingIRQ(id_rtc);
	NVIC_SetPriority(id_rtc, 0);
	NVIC_EnableIRQ(id_rtc);

	/* Ativa interrupcao via alarme */
	rtc_enable_interrupt(rtc,  irq_type);
  401b18:	990d      	ldr	r1, [sp, #52]	; 0x34
  401b1a:	4628      	mov	r0, r5
  401b1c:	4b0b      	ldr	r3, [pc, #44]	; (401b4c <RTC_init+0x9c>)
  401b1e:	4798      	blx	r3
}
  401b20:	b002      	add	sp, #8
  401b22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  401b26:	b002      	add	sp, #8
  401b28:	4770      	bx	lr
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401b2a:	f004 040f 	and.w	r4, r4, #15
  401b2e:	4a08      	ldr	r2, [pc, #32]	; (401b50 <RTC_init+0xa0>)
  401b30:	2100      	movs	r1, #0
  401b32:	5511      	strb	r1, [r2, r4]
  401b34:	e7ee      	b.n	401b14 <RTC_init+0x64>
  401b36:	bf00      	nop
  401b38:	00401325 	.word	0x00401325
  401b3c:	004001ad 	.word	0x004001ad
  401b40:	00400259 	.word	0x00400259
  401b44:	004001c9 	.word	0x004001c9
  401b48:	e000e100 	.word	0xe000e100
  401b4c:	004001c3 	.word	0x004001c3
  401b50:	e000ed14 	.word	0xe000ed14

00401b54 <main>:


int main (void)
{
  401b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b58:	b08f      	sub	sp, #60	; 0x3c
	board_init();
  401b5a:	4bb1      	ldr	r3, [pc, #708]	; (401e20 <main+0x2cc>)
  401b5c:	4798      	blx	r3
	sysclk_init();
  401b5e:	4bb1      	ldr	r3, [pc, #708]	; (401e24 <main+0x2d0>)
  401b60:	4798      	blx	r3
	delay_init();
	init();
  401b62:	4bb1      	ldr	r3, [pc, #708]	; (401e28 <main+0x2d4>)
  401b64:	4798      	blx	r3

	// Init OLED
	gfx_mono_ssd1306_init();
  401b66:	4bb1      	ldr	r3, [pc, #708]	; (401e2c <main+0x2d8>)
  401b68:	4798      	blx	r3
	
	
	// TC INIT
	TC_init(TC0, ID_TC0, 0, 5);
  401b6a:	2305      	movs	r3, #5
  401b6c:	2200      	movs	r2, #0
  401b6e:	2117      	movs	r1, #23
  401b70:	48af      	ldr	r0, [pc, #700]	; (401e30 <main+0x2dc>)
  401b72:	4cb0      	ldr	r4, [pc, #704]	; (401e34 <main+0x2e0>)
  401b74:	47a0      	blx	r4
	TC_init(TC1, ID_TC3, 0, 10);
  401b76:	230a      	movs	r3, #10
  401b78:	2200      	movs	r2, #0
  401b7a:	211a      	movs	r1, #26
  401b7c:	48ae      	ldr	r0, [pc, #696]	; (401e38 <main+0x2e4>)
  401b7e:	47a0      	blx	r4
	TC_init(TC2, ID_TC6, 0, 1);
  401b80:	2301      	movs	r3, #1
  401b82:	2200      	movs	r2, #0
  401b84:	212f      	movs	r1, #47	; 0x2f
  401b86:	48ad      	ldr	r0, [pc, #692]	; (401e3c <main+0x2e8>)
  401b88:	47a0      	blx	r4
	
	f_rtt_alarme = true;
  401b8a:	2201      	movs	r2, #1
  401b8c:	4bac      	ldr	r3, [pc, #688]	; (401e40 <main+0x2ec>)
  401b8e:	701a      	strb	r2, [r3, #0]

	calendar rtc_initial = {2018, 3, 19, 12, 15, 45 ,1};
  401b90:	ac07      	add	r4, sp, #28
  401b92:	4dac      	ldr	r5, [pc, #688]	; (401e44 <main+0x2f0>)
  401b94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401b96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401b98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  401b9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	RTC_init(RTC, ID_RTC, rtc_initial, RTC_IER_ALREN);
  401ba0:	2602      	movs	r6, #2
  401ba2:	9605      	str	r6, [sp, #20]
  401ba4:	466c      	mov	r4, sp
  401ba6:	ad09      	add	r5, sp, #36	; 0x24
  401ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401bac:	682b      	ldr	r3, [r5, #0]
  401bae:	6023      	str	r3, [r4, #0]
  401bb0:	ab07      	add	r3, sp, #28
  401bb2:	cb0c      	ldmia	r3, {r2, r3}
  401bb4:	4631      	mov	r1, r6
  401bb6:	48a4      	ldr	r0, [pc, #656]	; (401e48 <main+0x2f4>)
  401bb8:	4ca4      	ldr	r4, [pc, #656]	; (401e4c <main+0x2f8>)
  401bba:	47a0      	blx	r4

// 		gfx_mono_draw_char(get_time_rtt(), 10, 0, &sysfont);

		gfx_mono_draw_string("5   10   1", 10, 0, &sysfont);

		if (get_time_rtt() == 1) {
  401bbc:	4ca4      	ldr	r4, [pc, #656]	; (401e50 <main+0x2fc>)
			gfx_mono_draw_filled_circle(95, 23, 2, GFX_PIXEL_CLR, GFX_WHOLE);
			gfx_mono_draw_filled_circle(105, 23, 2, GFX_PIXEL_CLR, GFX_WHOLE);

		}
				
		if (led_status) {
  401bbe:	4fa5      	ldr	r7, [pc, #660]	; (401e54 <main+0x300>)
				}
			}
			
		}
		
		if (f_rtt_alarme){
  401bc0:	f8df 927c 	ldr.w	r9, [pc, #636]	; 401e40 <main+0x2ec>
	rtt_sel_source(RTT, false);
  401bc4:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 401e88 <main+0x334>
	ul_previous_time = rtt_read_timer_value(RTT);
  401bc8:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 401e8c <main+0x338>
  401bcc:	e18d      	b.n	401eea <main+0x396>
			gfx_mono_draw_filled_circle(5, 23, 2, GFX_PIXEL_SET, GFX_WHOLE);
  401bce:	26ff      	movs	r6, #255	; 0xff
  401bd0:	9600      	str	r6, [sp, #0]
  401bd2:	2301      	movs	r3, #1
  401bd4:	2202      	movs	r2, #2
  401bd6:	2117      	movs	r1, #23
  401bd8:	2005      	movs	r0, #5
  401bda:	4d9f      	ldr	r5, [pc, #636]	; (401e58 <main+0x304>)
  401bdc:	47a8      	blx	r5
			gfx_mono_draw_filled_circle(15, 23, 2, GFX_PIXEL_SET, GFX_WHOLE);
  401bde:	9600      	str	r6, [sp, #0]
  401be0:	2301      	movs	r3, #1
  401be2:	2202      	movs	r2, #2
  401be4:	2117      	movs	r1, #23
  401be6:	200f      	movs	r0, #15
  401be8:	47a8      	blx	r5
			gfx_mono_draw_filled_circle(25, 23, 2, GFX_PIXEL_SET, GFX_WHOLE);
  401bea:	9600      	str	r6, [sp, #0]
  401bec:	2301      	movs	r3, #1
  401bee:	2202      	movs	r2, #2
  401bf0:	2117      	movs	r1, #23
  401bf2:	2019      	movs	r0, #25
  401bf4:	47a8      	blx	r5
  401bf6:	e0d4      	b.n	401da2 <main+0x24e>
			gfx_mono_draw_filled_circle(5, 23, 2, GFX_PIXEL_SET, GFX_WHOLE);
  401bf8:	26ff      	movs	r6, #255	; 0xff
  401bfa:	9600      	str	r6, [sp, #0]
  401bfc:	2301      	movs	r3, #1
  401bfe:	2202      	movs	r2, #2
  401c00:	2117      	movs	r1, #23
  401c02:	2005      	movs	r0, #5
  401c04:	4d94      	ldr	r5, [pc, #592]	; (401e58 <main+0x304>)
  401c06:	47a8      	blx	r5
			gfx_mono_draw_filled_circle(15, 23, 2, GFX_PIXEL_SET, GFX_WHOLE);
  401c08:	9600      	str	r6, [sp, #0]
  401c0a:	2301      	movs	r3, #1
  401c0c:	2202      	movs	r2, #2
  401c0e:	2117      	movs	r1, #23
  401c10:	200f      	movs	r0, #15
  401c12:	47a8      	blx	r5
			gfx_mono_draw_filled_circle(25, 23, 2, GFX_PIXEL_SET, GFX_WHOLE);
  401c14:	9600      	str	r6, [sp, #0]
  401c16:	2301      	movs	r3, #1
  401c18:	2202      	movs	r2, #2
  401c1a:	2117      	movs	r1, #23
  401c1c:	2019      	movs	r0, #25
  401c1e:	47a8      	blx	r5
			gfx_mono_draw_filled_circle(35, 23, 2, GFX_PIXEL_SET, GFX_WHOLE);
  401c20:	9600      	str	r6, [sp, #0]
  401c22:	2301      	movs	r3, #1
  401c24:	2202      	movs	r2, #2
  401c26:	2117      	movs	r1, #23
  401c28:	2023      	movs	r0, #35	; 0x23
  401c2a:	47a8      	blx	r5
			gfx_mono_draw_filled_circle(45, 23, 2, GFX_PIXEL_SET, GFX_WHOLE);
  401c2c:	9600      	str	r6, [sp, #0]
  401c2e:	2301      	movs	r3, #1
  401c30:	2202      	movs	r2, #2
  401c32:	2117      	movs	r1, #23
  401c34:	202d      	movs	r0, #45	; 0x2d
  401c36:	47a8      	blx	r5
			gfx_mono_draw_filled_circle(55, 23, 2, GFX_PIXEL_SET, GFX_WHOLE);
  401c38:	9600      	str	r6, [sp, #0]
  401c3a:	2301      	movs	r3, #1
  401c3c:	2202      	movs	r2, #2
  401c3e:	2117      	movs	r1, #23
  401c40:	2037      	movs	r0, #55	; 0x37
  401c42:	47a8      	blx	r5
  401c44:	e0b6      	b.n	401db4 <main+0x260>
			gfx_mono_draw_filled_circle(5, 23, 2, GFX_PIXEL_SET, GFX_WHOLE);
  401c46:	26ff      	movs	r6, #255	; 0xff
  401c48:	9600      	str	r6, [sp, #0]
  401c4a:	2301      	movs	r3, #1
  401c4c:	2202      	movs	r2, #2
  401c4e:	2117      	movs	r1, #23
  401c50:	2005      	movs	r0, #5
  401c52:	4d81      	ldr	r5, [pc, #516]	; (401e58 <main+0x304>)
  401c54:	47a8      	blx	r5
			gfx_mono_draw_filled_circle(15, 23, 2, GFX_PIXEL_SET, GFX_WHOLE);
  401c56:	9600      	str	r6, [sp, #0]
  401c58:	2301      	movs	r3, #1
  401c5a:	2202      	movs	r2, #2
  401c5c:	2117      	movs	r1, #23
  401c5e:	200f      	movs	r0, #15
  401c60:	47a8      	blx	r5
			gfx_mono_draw_filled_circle(25, 23, 2, GFX_PIXEL_SET, GFX_WHOLE);
  401c62:	9600      	str	r6, [sp, #0]
  401c64:	2301      	movs	r3, #1
  401c66:	2202      	movs	r2, #2
  401c68:	2117      	movs	r1, #23
  401c6a:	2019      	movs	r0, #25
  401c6c:	47a8      	blx	r5
			gfx_mono_draw_filled_circle(35, 23, 2, GFX_PIXEL_SET, GFX_WHOLE);
  401c6e:	9600      	str	r6, [sp, #0]
  401c70:	2301      	movs	r3, #1
  401c72:	2202      	movs	r2, #2
  401c74:	2117      	movs	r1, #23
  401c76:	2023      	movs	r0, #35	; 0x23
  401c78:	47a8      	blx	r5
			gfx_mono_draw_filled_circle(45, 23, 2, GFX_PIXEL_SET, GFX_WHOLE);
  401c7a:	9600      	str	r6, [sp, #0]
  401c7c:	2301      	movs	r3, #1
  401c7e:	2202      	movs	r2, #2
  401c80:	2117      	movs	r1, #23
  401c82:	202d      	movs	r0, #45	; 0x2d
  401c84:	47a8      	blx	r5
			gfx_mono_draw_filled_circle(55, 23, 2, GFX_PIXEL_SET, GFX_WHOLE);
  401c86:	9600      	str	r6, [sp, #0]
  401c88:	2301      	movs	r3, #1
  401c8a:	2202      	movs	r2, #2
  401c8c:	2117      	movs	r1, #23
  401c8e:	2037      	movs	r0, #55	; 0x37
  401c90:	47a8      	blx	r5
			gfx_mono_draw_filled_circle(65, 23, 2, GFX_PIXEL_SET, GFX_WHOLE);
  401c92:	9600      	str	r6, [sp, #0]
  401c94:	2301      	movs	r3, #1
  401c96:	2202      	movs	r2, #2
  401c98:	2117      	movs	r1, #23
  401c9a:	2041      	movs	r0, #65	; 0x41
  401c9c:	47a8      	blx	r5
			gfx_mono_draw_filled_circle(75, 23, 2, GFX_PIXEL_SET, GFX_WHOLE);
  401c9e:	9600      	str	r6, [sp, #0]
  401ca0:	2301      	movs	r3, #1
  401ca2:	2202      	movs	r2, #2
  401ca4:	2117      	movs	r1, #23
  401ca6:	204b      	movs	r0, #75	; 0x4b
  401ca8:	47a8      	blx	r5
			gfx_mono_draw_filled_circle(85, 23, 2, GFX_PIXEL_SET, GFX_WHOLE);
  401caa:	9600      	str	r6, [sp, #0]
  401cac:	2301      	movs	r3, #1
  401cae:	2202      	movs	r2, #2
  401cb0:	2117      	movs	r1, #23
  401cb2:	2055      	movs	r0, #85	; 0x55
  401cb4:	47a8      	blx	r5
			gfx_mono_draw_filled_circle(95, 23, 2, GFX_PIXEL_SET, GFX_WHOLE);
  401cb6:	9600      	str	r6, [sp, #0]
  401cb8:	2301      	movs	r3, #1
  401cba:	2202      	movs	r2, #2
  401cbc:	2117      	movs	r1, #23
  401cbe:	205f      	movs	r0, #95	; 0x5f
  401cc0:	47a8      	blx	r5
			gfx_mono_draw_filled_circle(105, 23, 2, GFX_PIXEL_SET, GFX_WHOLE);
  401cc2:	9600      	str	r6, [sp, #0]
  401cc4:	2301      	movs	r3, #1
  401cc6:	2202      	movs	r2, #2
  401cc8:	2117      	movs	r1, #23
  401cca:	2069      	movs	r0, #105	; 0x69
  401ccc:	47a8      	blx	r5
  401cce:	e07a      	b.n	401dc6 <main+0x272>
			gfx_mono_draw_filled_circle(5, 23, 2, GFX_PIXEL_CLR, GFX_WHOLE);
  401cd0:	26ff      	movs	r6, #255	; 0xff
  401cd2:	9600      	str	r6, [sp, #0]
  401cd4:	2300      	movs	r3, #0
  401cd6:	2202      	movs	r2, #2
  401cd8:	2117      	movs	r1, #23
  401cda:	2005      	movs	r0, #5
  401cdc:	4d5e      	ldr	r5, [pc, #376]	; (401e58 <main+0x304>)
  401cde:	47a8      	blx	r5
			gfx_mono_draw_filled_circle(15, 23, 2, GFX_PIXEL_CLR, GFX_WHOLE);
  401ce0:	9600      	str	r6, [sp, #0]
  401ce2:	2300      	movs	r3, #0
  401ce4:	2202      	movs	r2, #2
  401ce6:	2117      	movs	r1, #23
  401ce8:	200f      	movs	r0, #15
  401cea:	47a8      	blx	r5
			gfx_mono_draw_filled_circle(25, 23, 2, GFX_PIXEL_CLR, GFX_WHOLE);
  401cec:	9600      	str	r6, [sp, #0]
  401cee:	2300      	movs	r3, #0
  401cf0:	2202      	movs	r2, #2
  401cf2:	2117      	movs	r1, #23
  401cf4:	2019      	movs	r0, #25
  401cf6:	47a8      	blx	r5
			gfx_mono_draw_filled_circle(35, 23, 2, GFX_PIXEL_CLR, GFX_WHOLE);
  401cf8:	9600      	str	r6, [sp, #0]
  401cfa:	2300      	movs	r3, #0
  401cfc:	2202      	movs	r2, #2
  401cfe:	2117      	movs	r1, #23
  401d00:	2023      	movs	r0, #35	; 0x23
  401d02:	47a8      	blx	r5
			gfx_mono_draw_filled_circle(45, 23, 2, GFX_PIXEL_CLR, GFX_WHOLE);
  401d04:	9600      	str	r6, [sp, #0]
  401d06:	2300      	movs	r3, #0
  401d08:	2202      	movs	r2, #2
  401d0a:	2117      	movs	r1, #23
  401d0c:	202d      	movs	r0, #45	; 0x2d
  401d0e:	47a8      	blx	r5
			gfx_mono_draw_filled_circle(55, 23, 2, GFX_PIXEL_CLR, GFX_WHOLE);
  401d10:	9600      	str	r6, [sp, #0]
  401d12:	2300      	movs	r3, #0
  401d14:	2202      	movs	r2, #2
  401d16:	2117      	movs	r1, #23
  401d18:	2037      	movs	r0, #55	; 0x37
  401d1a:	47a8      	blx	r5
			gfx_mono_draw_filled_circle(65, 23, 2, GFX_PIXEL_CLR, GFX_WHOLE);
  401d1c:	9600      	str	r6, [sp, #0]
  401d1e:	2300      	movs	r3, #0
  401d20:	2202      	movs	r2, #2
  401d22:	2117      	movs	r1, #23
  401d24:	2041      	movs	r0, #65	; 0x41
  401d26:	47a8      	blx	r5
			gfx_mono_draw_filled_circle(75, 23, 2, GFX_PIXEL_CLR, GFX_WHOLE);
  401d28:	9600      	str	r6, [sp, #0]
  401d2a:	2300      	movs	r3, #0
  401d2c:	2202      	movs	r2, #2
  401d2e:	2117      	movs	r1, #23
  401d30:	204b      	movs	r0, #75	; 0x4b
  401d32:	47a8      	blx	r5
			gfx_mono_draw_filled_circle(85, 23, 2, GFX_PIXEL_CLR, GFX_WHOLE);
  401d34:	9600      	str	r6, [sp, #0]
  401d36:	2300      	movs	r3, #0
  401d38:	2202      	movs	r2, #2
  401d3a:	2117      	movs	r1, #23
  401d3c:	2055      	movs	r0, #85	; 0x55
  401d3e:	47a8      	blx	r5
			gfx_mono_draw_filled_circle(95, 23, 2, GFX_PIXEL_CLR, GFX_WHOLE);
  401d40:	9600      	str	r6, [sp, #0]
  401d42:	2300      	movs	r3, #0
  401d44:	2202      	movs	r2, #2
  401d46:	2117      	movs	r1, #23
  401d48:	205f      	movs	r0, #95	; 0x5f
  401d4a:	47a8      	blx	r5
			gfx_mono_draw_filled_circle(105, 23, 2, GFX_PIXEL_CLR, GFX_WHOLE);
  401d4c:	9600      	str	r6, [sp, #0]
  401d4e:	2300      	movs	r3, #0
  401d50:	2202      	movs	r2, #2
  401d52:	2117      	movs	r1, #23
  401d54:	2069      	movs	r0, #105	; 0x69
  401d56:	47a8      	blx	r5
  401d58:	e03e      	b.n	401dd8 <main+0x284>
					pisca_TC_1(1,5);
  401d5a:	2105      	movs	r1, #5
  401d5c:	2001      	movs	r0, #1
  401d5e:	4b3f      	ldr	r3, [pc, #252]	; (401e5c <main+0x308>)
  401d60:	4798      	blx	r3
					flag_tc_led1 = 0;
  401d62:	2200      	movs	r2, #0
  401d64:	4b3e      	ldr	r3, [pc, #248]	; (401e60 <main+0x30c>)
  401d66:	701a      	strb	r2, [r3, #0]
  401d68:	e041      	b.n	401dee <main+0x29a>
					pisca_TC_2(1,10);
  401d6a:	210a      	movs	r1, #10
  401d6c:	2001      	movs	r0, #1
  401d6e:	4b3d      	ldr	r3, [pc, #244]	; (401e64 <main+0x310>)
  401d70:	4798      	blx	r3
					flag_tc_led2 = 0;
  401d72:	2200      	movs	r2, #0
  401d74:	4b3c      	ldr	r3, [pc, #240]	; (401e68 <main+0x314>)
  401d76:	701a      	strb	r2, [r3, #0]
  401d78:	e041      	b.n	401dfe <main+0x2aa>
		if (f_rtt_alarme){
  401d7a:	f899 3000 	ldrb.w	r3, [r9]
  401d7e:	2b00      	cmp	r3, #0
  401d80:	f040 8086 	bne.w	401e90 <main+0x33c>
		gfx_mono_draw_string("5   10   1", 10, 0, &sysfont);
  401d84:	465b      	mov	r3, fp
  401d86:	2200      	movs	r2, #0
  401d88:	210a      	movs	r1, #10
  401d8a:	4838      	ldr	r0, [pc, #224]	; (401e6c <main+0x318>)
  401d8c:	4d38      	ldr	r5, [pc, #224]	; (401e70 <main+0x31c>)
  401d8e:	47a8      	blx	r5
		if (get_time_rtt() == 1) {
  401d90:	47a0      	blx	r4
  401d92:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  401d96:	eeb4 0a67 	vcmp.f32	s0, s15
  401d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401d9e:	f43f af16 	beq.w	401bce <main+0x7a>
		if (get_time_rtt() == 9) {
  401da2:	47a0      	blx	r4
  401da4:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
  401da8:	eeb4 0a67 	vcmp.f32	s0, s15
  401dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401db0:	f43f af22 	beq.w	401bf8 <main+0xa4>
		if (get_time_rtt() == 17) {
  401db4:	47a0      	blx	r4
  401db6:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
  401dba:	eeb4 0a67 	vcmp.f32	s0, s15
  401dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401dc2:	f43f af40 	beq.w	401c46 <main+0xf2>
		if (get_time_rtt() == 18) {
  401dc6:	47a0      	blx	r4
  401dc8:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
  401dcc:	eeb4 0a67 	vcmp.f32	s0, s15
  401dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  401dd4:	f43f af7c 	beq.w	401cd0 <main+0x17c>
		if (led_status) {
  401dd8:	783b      	ldrb	r3, [r7, #0]
  401dda:	2b00      	cmp	r3, #0
  401ddc:	d0cd      	beq.n	401d7a <main+0x226>
			if(flag_tc_led1){
  401dde:	4b20      	ldr	r3, [pc, #128]	; (401e60 <main+0x30c>)
  401de0:	781b      	ldrb	r3, [r3, #0]
  401de2:	b123      	cbz	r3, 401dee <main+0x29a>
				if (but_flag_1 == 1) {
  401de4:	4b23      	ldr	r3, [pc, #140]	; (401e74 <main+0x320>)
  401de6:	781b      	ldrb	r3, [r3, #0]
  401de8:	b2db      	uxtb	r3, r3
  401dea:	2b01      	cmp	r3, #1
  401dec:	d0b5      	beq.n	401d5a <main+0x206>
			if(flag_tc_led2){
  401dee:	4b1e      	ldr	r3, [pc, #120]	; (401e68 <main+0x314>)
  401df0:	781b      	ldrb	r3, [r3, #0]
  401df2:	b123      	cbz	r3, 401dfe <main+0x2aa>
				if (but_flag_2 == 1) {
  401df4:	4b20      	ldr	r3, [pc, #128]	; (401e78 <main+0x324>)
  401df6:	781b      	ldrb	r3, [r3, #0]
  401df8:	b2db      	uxtb	r3, r3
  401dfa:	2b01      	cmp	r3, #1
  401dfc:	d0b5      	beq.n	401d6a <main+0x216>
			if(flag_tc_led3){
  401dfe:	4b1f      	ldr	r3, [pc, #124]	; (401e7c <main+0x328>)
  401e00:	781b      	ldrb	r3, [r3, #0]
  401e02:	2b00      	cmp	r3, #0
  401e04:	d0b9      	beq.n	401d7a <main+0x226>
				if (but_flag_3 == 1) {
  401e06:	4b1e      	ldr	r3, [pc, #120]	; (401e80 <main+0x32c>)
  401e08:	781b      	ldrb	r3, [r3, #0]
  401e0a:	b2db      	uxtb	r3, r3
  401e0c:	2b01      	cmp	r3, #1
  401e0e:	d1b4      	bne.n	401d7a <main+0x226>
					pisca_TC_3(1,1);
  401e10:	2101      	movs	r1, #1
  401e12:	4608      	mov	r0, r1
  401e14:	4b1b      	ldr	r3, [pc, #108]	; (401e84 <main+0x330>)
  401e16:	4798      	blx	r3
					flag_tc_led3 = 0;
  401e18:	2200      	movs	r2, #0
  401e1a:	4b18      	ldr	r3, [pc, #96]	; (401e7c <main+0x328>)
  401e1c:	701a      	strb	r2, [r3, #0]
  401e1e:	e7ac      	b.n	401d7a <main+0x226>
  401e20:	00400dd9 	.word	0x00400dd9
  401e24:	00400d69 	.word	0x00400d69
  401e28:	0040173d 	.word	0x0040173d
  401e2c:	00400a05 	.word	0x00400a05
  401e30:	4000c000 	.word	0x4000c000
  401e34:	00401a1d 	.word	0x00401a1d
  401e38:	40010000 	.word	0x40010000
  401e3c:	40014000 	.word	0x40014000
  401e40:	204006e4 	.word	0x204006e4
  401e44:	00402dd0 	.word	0x00402dd0
  401e48:	400e1860 	.word	0x400e1860
  401e4c:	00401ab1 	.word	0x00401ab1
  401e50:	00401625 	.word	0x00401625
  401e54:	204006e9 	.word	0x204006e9
  401e58:	004007a5 	.word	0x004007a5
  401e5c:	0040187d 	.word	0x0040187d
  401e60:	204006e6 	.word	0x204006e6
  401e64:	00401905 	.word	0x00401905
  401e68:	204006e7 	.word	0x204006e7
  401e6c:	00402dec 	.word	0x00402dec
  401e70:	0040096d 	.word	0x0040096d
  401e74:	204006ec 	.word	0x204006ec
  401e78:	204006ed 	.word	0x204006ed
  401e7c:	204006e8 	.word	0x204006e8
  401e80:	204006f4 	.word	0x204006f4
  401e84:	00401995 	.word	0x00401995
  401e88:	400e1830 	.word	0x400e1830
  401e8c:	00400381 	.word	0x00400381
	rtt_sel_source(RTT, false);
  401e90:	2100      	movs	r1, #0
  401e92:	4650      	mov	r0, sl
  401e94:	4b16      	ldr	r3, [pc, #88]	; (401ef0 <main+0x39c>)
  401e96:	4798      	blx	r3
	rtt_init(RTT, pllPreScale);
  401e98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  401e9c:	4650      	mov	r0, sl
  401e9e:	4b15      	ldr	r3, [pc, #84]	; (401ef4 <main+0x3a0>)
  401ea0:	4798      	blx	r3
	ul_previous_time = rtt_read_timer_value(RTT);
  401ea2:	4650      	mov	r0, sl
  401ea4:	47c0      	blx	r8
  401ea6:	4605      	mov	r5, r0
	while (ul_previous_time == rtt_read_timer_value(RTT));
  401ea8:	4650      	mov	r0, sl
  401eaa:	47c0      	blx	r8
  401eac:	4285      	cmp	r5, r0
  401eae:	d0fb      	beq.n	401ea8 <main+0x354>
	rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  401eb0:	f105 0112 	add.w	r1, r5, #18
  401eb4:	4650      	mov	r0, sl
  401eb6:	4b10      	ldr	r3, [pc, #64]	; (401ef8 <main+0x3a4>)
  401eb8:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401eba:	4b10      	ldr	r3, [pc, #64]	; (401efc <main+0x3a8>)
  401ebc:	2208      	movs	r2, #8
  401ebe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401ec2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401ec6:	2500      	movs	r5, #0
  401ec8:	f883 5303 	strb.w	r5, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401ecc:	601a      	str	r2, [r3, #0]
	rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  401ece:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  401ed2:	4650      	mov	r0, sl
  401ed4:	4b0a      	ldr	r3, [pc, #40]	; (401f00 <main+0x3ac>)
  401ed6:	4798      	blx	r3
			uint32_t irqRTTvalue = 18;
      
			// reinicia RTT para gerar um novo IRQ
			RTT_init(pllPreScale, irqRTTvalue);         
      		 						
			f_rtt_alarme = false;
  401ed8:	f889 5000 	strb.w	r5, [r9]
			
			if (led_status == true) {
  401edc:	783b      	ldrb	r3, [r7, #0]
  401ede:	b2db      	uxtb	r3, r3
  401ee0:	2b01      	cmp	r3, #1
				led_status = false;
  401ee2:	bf0c      	ite	eq
  401ee4:	462b      	moveq	r3, r5
			} else {
				led_status = true;
  401ee6:	2301      	movne	r3, #1
  401ee8:	703b      	strb	r3, [r7, #0]
		gfx_mono_draw_string("5   10   1", 10, 0, &sysfont);
  401eea:	f8df b018 	ldr.w	fp, [pc, #24]	; 401f04 <main+0x3b0>
  401eee:	e749      	b.n	401d84 <main+0x230>
  401ef0:	0040032d 	.word	0x0040032d
  401ef4:	00400319 	.word	0x00400319
  401ef8:	00400399 	.word	0x00400399
  401efc:	e000e100 	.word	0xe000e100
  401f00:	00400359 	.word	0x00400359
  401f04:	2040000c 	.word	0x2040000c

00401f08 <__aeabi_uldivmod>:
  401f08:	b953      	cbnz	r3, 401f20 <__aeabi_uldivmod+0x18>
  401f0a:	b94a      	cbnz	r2, 401f20 <__aeabi_uldivmod+0x18>
  401f0c:	2900      	cmp	r1, #0
  401f0e:	bf08      	it	eq
  401f10:	2800      	cmpeq	r0, #0
  401f12:	bf1c      	itt	ne
  401f14:	f04f 31ff 	movne.w	r1, #4294967295
  401f18:	f04f 30ff 	movne.w	r0, #4294967295
  401f1c:	f000 b97a 	b.w	402214 <__aeabi_idiv0>
  401f20:	f1ad 0c08 	sub.w	ip, sp, #8
  401f24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  401f28:	f000 f806 	bl	401f38 <__udivmoddi4>
  401f2c:	f8dd e004 	ldr.w	lr, [sp, #4]
  401f30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401f34:	b004      	add	sp, #16
  401f36:	4770      	bx	lr

00401f38 <__udivmoddi4>:
  401f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401f3c:	468c      	mov	ip, r1
  401f3e:	460d      	mov	r5, r1
  401f40:	4604      	mov	r4, r0
  401f42:	9e08      	ldr	r6, [sp, #32]
  401f44:	2b00      	cmp	r3, #0
  401f46:	d151      	bne.n	401fec <__udivmoddi4+0xb4>
  401f48:	428a      	cmp	r2, r1
  401f4a:	4617      	mov	r7, r2
  401f4c:	d96d      	bls.n	40202a <__udivmoddi4+0xf2>
  401f4e:	fab2 fe82 	clz	lr, r2
  401f52:	f1be 0f00 	cmp.w	lr, #0
  401f56:	d00b      	beq.n	401f70 <__udivmoddi4+0x38>
  401f58:	f1ce 0c20 	rsb	ip, lr, #32
  401f5c:	fa01 f50e 	lsl.w	r5, r1, lr
  401f60:	fa20 fc0c 	lsr.w	ip, r0, ip
  401f64:	fa02 f70e 	lsl.w	r7, r2, lr
  401f68:	ea4c 0c05 	orr.w	ip, ip, r5
  401f6c:	fa00 f40e 	lsl.w	r4, r0, lr
  401f70:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  401f74:	0c25      	lsrs	r5, r4, #16
  401f76:	fbbc f8fa 	udiv	r8, ip, sl
  401f7a:	fa1f f987 	uxth.w	r9, r7
  401f7e:	fb0a cc18 	mls	ip, sl, r8, ip
  401f82:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  401f86:	fb08 f309 	mul.w	r3, r8, r9
  401f8a:	42ab      	cmp	r3, r5
  401f8c:	d90a      	bls.n	401fa4 <__udivmoddi4+0x6c>
  401f8e:	19ed      	adds	r5, r5, r7
  401f90:	f108 32ff 	add.w	r2, r8, #4294967295
  401f94:	f080 8123 	bcs.w	4021de <__udivmoddi4+0x2a6>
  401f98:	42ab      	cmp	r3, r5
  401f9a:	f240 8120 	bls.w	4021de <__udivmoddi4+0x2a6>
  401f9e:	f1a8 0802 	sub.w	r8, r8, #2
  401fa2:	443d      	add	r5, r7
  401fa4:	1aed      	subs	r5, r5, r3
  401fa6:	b2a4      	uxth	r4, r4
  401fa8:	fbb5 f0fa 	udiv	r0, r5, sl
  401fac:	fb0a 5510 	mls	r5, sl, r0, r5
  401fb0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  401fb4:	fb00 f909 	mul.w	r9, r0, r9
  401fb8:	45a1      	cmp	r9, r4
  401fba:	d909      	bls.n	401fd0 <__udivmoddi4+0x98>
  401fbc:	19e4      	adds	r4, r4, r7
  401fbe:	f100 33ff 	add.w	r3, r0, #4294967295
  401fc2:	f080 810a 	bcs.w	4021da <__udivmoddi4+0x2a2>
  401fc6:	45a1      	cmp	r9, r4
  401fc8:	f240 8107 	bls.w	4021da <__udivmoddi4+0x2a2>
  401fcc:	3802      	subs	r0, #2
  401fce:	443c      	add	r4, r7
  401fd0:	eba4 0409 	sub.w	r4, r4, r9
  401fd4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401fd8:	2100      	movs	r1, #0
  401fda:	2e00      	cmp	r6, #0
  401fdc:	d061      	beq.n	4020a2 <__udivmoddi4+0x16a>
  401fde:	fa24 f40e 	lsr.w	r4, r4, lr
  401fe2:	2300      	movs	r3, #0
  401fe4:	6034      	str	r4, [r6, #0]
  401fe6:	6073      	str	r3, [r6, #4]
  401fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401fec:	428b      	cmp	r3, r1
  401fee:	d907      	bls.n	402000 <__udivmoddi4+0xc8>
  401ff0:	2e00      	cmp	r6, #0
  401ff2:	d054      	beq.n	40209e <__udivmoddi4+0x166>
  401ff4:	2100      	movs	r1, #0
  401ff6:	e886 0021 	stmia.w	r6, {r0, r5}
  401ffa:	4608      	mov	r0, r1
  401ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402000:	fab3 f183 	clz	r1, r3
  402004:	2900      	cmp	r1, #0
  402006:	f040 808e 	bne.w	402126 <__udivmoddi4+0x1ee>
  40200a:	42ab      	cmp	r3, r5
  40200c:	d302      	bcc.n	402014 <__udivmoddi4+0xdc>
  40200e:	4282      	cmp	r2, r0
  402010:	f200 80fa 	bhi.w	402208 <__udivmoddi4+0x2d0>
  402014:	1a84      	subs	r4, r0, r2
  402016:	eb65 0503 	sbc.w	r5, r5, r3
  40201a:	2001      	movs	r0, #1
  40201c:	46ac      	mov	ip, r5
  40201e:	2e00      	cmp	r6, #0
  402020:	d03f      	beq.n	4020a2 <__udivmoddi4+0x16a>
  402022:	e886 1010 	stmia.w	r6, {r4, ip}
  402026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40202a:	b912      	cbnz	r2, 402032 <__udivmoddi4+0xfa>
  40202c:	2701      	movs	r7, #1
  40202e:	fbb7 f7f2 	udiv	r7, r7, r2
  402032:	fab7 fe87 	clz	lr, r7
  402036:	f1be 0f00 	cmp.w	lr, #0
  40203a:	d134      	bne.n	4020a6 <__udivmoddi4+0x16e>
  40203c:	1beb      	subs	r3, r5, r7
  40203e:	0c3a      	lsrs	r2, r7, #16
  402040:	fa1f fc87 	uxth.w	ip, r7
  402044:	2101      	movs	r1, #1
  402046:	fbb3 f8f2 	udiv	r8, r3, r2
  40204a:	0c25      	lsrs	r5, r4, #16
  40204c:	fb02 3318 	mls	r3, r2, r8, r3
  402050:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402054:	fb0c f308 	mul.w	r3, ip, r8
  402058:	42ab      	cmp	r3, r5
  40205a:	d907      	bls.n	40206c <__udivmoddi4+0x134>
  40205c:	19ed      	adds	r5, r5, r7
  40205e:	f108 30ff 	add.w	r0, r8, #4294967295
  402062:	d202      	bcs.n	40206a <__udivmoddi4+0x132>
  402064:	42ab      	cmp	r3, r5
  402066:	f200 80d1 	bhi.w	40220c <__udivmoddi4+0x2d4>
  40206a:	4680      	mov	r8, r0
  40206c:	1aed      	subs	r5, r5, r3
  40206e:	b2a3      	uxth	r3, r4
  402070:	fbb5 f0f2 	udiv	r0, r5, r2
  402074:	fb02 5510 	mls	r5, r2, r0, r5
  402078:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40207c:	fb0c fc00 	mul.w	ip, ip, r0
  402080:	45a4      	cmp	ip, r4
  402082:	d907      	bls.n	402094 <__udivmoddi4+0x15c>
  402084:	19e4      	adds	r4, r4, r7
  402086:	f100 33ff 	add.w	r3, r0, #4294967295
  40208a:	d202      	bcs.n	402092 <__udivmoddi4+0x15a>
  40208c:	45a4      	cmp	ip, r4
  40208e:	f200 80b8 	bhi.w	402202 <__udivmoddi4+0x2ca>
  402092:	4618      	mov	r0, r3
  402094:	eba4 040c 	sub.w	r4, r4, ip
  402098:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40209c:	e79d      	b.n	401fda <__udivmoddi4+0xa2>
  40209e:	4631      	mov	r1, r6
  4020a0:	4630      	mov	r0, r6
  4020a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4020a6:	f1ce 0420 	rsb	r4, lr, #32
  4020aa:	fa05 f30e 	lsl.w	r3, r5, lr
  4020ae:	fa07 f70e 	lsl.w	r7, r7, lr
  4020b2:	fa20 f804 	lsr.w	r8, r0, r4
  4020b6:	0c3a      	lsrs	r2, r7, #16
  4020b8:	fa25 f404 	lsr.w	r4, r5, r4
  4020bc:	ea48 0803 	orr.w	r8, r8, r3
  4020c0:	fbb4 f1f2 	udiv	r1, r4, r2
  4020c4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4020c8:	fb02 4411 	mls	r4, r2, r1, r4
  4020cc:	fa1f fc87 	uxth.w	ip, r7
  4020d0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4020d4:	fb01 f30c 	mul.w	r3, r1, ip
  4020d8:	42ab      	cmp	r3, r5
  4020da:	fa00 f40e 	lsl.w	r4, r0, lr
  4020de:	d909      	bls.n	4020f4 <__udivmoddi4+0x1bc>
  4020e0:	19ed      	adds	r5, r5, r7
  4020e2:	f101 30ff 	add.w	r0, r1, #4294967295
  4020e6:	f080 808a 	bcs.w	4021fe <__udivmoddi4+0x2c6>
  4020ea:	42ab      	cmp	r3, r5
  4020ec:	f240 8087 	bls.w	4021fe <__udivmoddi4+0x2c6>
  4020f0:	3902      	subs	r1, #2
  4020f2:	443d      	add	r5, r7
  4020f4:	1aeb      	subs	r3, r5, r3
  4020f6:	fa1f f588 	uxth.w	r5, r8
  4020fa:	fbb3 f0f2 	udiv	r0, r3, r2
  4020fe:	fb02 3310 	mls	r3, r2, r0, r3
  402102:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402106:	fb00 f30c 	mul.w	r3, r0, ip
  40210a:	42ab      	cmp	r3, r5
  40210c:	d907      	bls.n	40211e <__udivmoddi4+0x1e6>
  40210e:	19ed      	adds	r5, r5, r7
  402110:	f100 38ff 	add.w	r8, r0, #4294967295
  402114:	d26f      	bcs.n	4021f6 <__udivmoddi4+0x2be>
  402116:	42ab      	cmp	r3, r5
  402118:	d96d      	bls.n	4021f6 <__udivmoddi4+0x2be>
  40211a:	3802      	subs	r0, #2
  40211c:	443d      	add	r5, r7
  40211e:	1aeb      	subs	r3, r5, r3
  402120:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  402124:	e78f      	b.n	402046 <__udivmoddi4+0x10e>
  402126:	f1c1 0720 	rsb	r7, r1, #32
  40212a:	fa22 f807 	lsr.w	r8, r2, r7
  40212e:	408b      	lsls	r3, r1
  402130:	fa05 f401 	lsl.w	r4, r5, r1
  402134:	ea48 0303 	orr.w	r3, r8, r3
  402138:	fa20 fe07 	lsr.w	lr, r0, r7
  40213c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402140:	40fd      	lsrs	r5, r7
  402142:	ea4e 0e04 	orr.w	lr, lr, r4
  402146:	fbb5 f9fc 	udiv	r9, r5, ip
  40214a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40214e:	fb0c 5519 	mls	r5, ip, r9, r5
  402152:	fa1f f883 	uxth.w	r8, r3
  402156:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40215a:	fb09 f408 	mul.w	r4, r9, r8
  40215e:	42ac      	cmp	r4, r5
  402160:	fa02 f201 	lsl.w	r2, r2, r1
  402164:	fa00 fa01 	lsl.w	sl, r0, r1
  402168:	d908      	bls.n	40217c <__udivmoddi4+0x244>
  40216a:	18ed      	adds	r5, r5, r3
  40216c:	f109 30ff 	add.w	r0, r9, #4294967295
  402170:	d243      	bcs.n	4021fa <__udivmoddi4+0x2c2>
  402172:	42ac      	cmp	r4, r5
  402174:	d941      	bls.n	4021fa <__udivmoddi4+0x2c2>
  402176:	f1a9 0902 	sub.w	r9, r9, #2
  40217a:	441d      	add	r5, r3
  40217c:	1b2d      	subs	r5, r5, r4
  40217e:	fa1f fe8e 	uxth.w	lr, lr
  402182:	fbb5 f0fc 	udiv	r0, r5, ip
  402186:	fb0c 5510 	mls	r5, ip, r0, r5
  40218a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40218e:	fb00 f808 	mul.w	r8, r0, r8
  402192:	45a0      	cmp	r8, r4
  402194:	d907      	bls.n	4021a6 <__udivmoddi4+0x26e>
  402196:	18e4      	adds	r4, r4, r3
  402198:	f100 35ff 	add.w	r5, r0, #4294967295
  40219c:	d229      	bcs.n	4021f2 <__udivmoddi4+0x2ba>
  40219e:	45a0      	cmp	r8, r4
  4021a0:	d927      	bls.n	4021f2 <__udivmoddi4+0x2ba>
  4021a2:	3802      	subs	r0, #2
  4021a4:	441c      	add	r4, r3
  4021a6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4021aa:	eba4 0408 	sub.w	r4, r4, r8
  4021ae:	fba0 8902 	umull	r8, r9, r0, r2
  4021b2:	454c      	cmp	r4, r9
  4021b4:	46c6      	mov	lr, r8
  4021b6:	464d      	mov	r5, r9
  4021b8:	d315      	bcc.n	4021e6 <__udivmoddi4+0x2ae>
  4021ba:	d012      	beq.n	4021e2 <__udivmoddi4+0x2aa>
  4021bc:	b156      	cbz	r6, 4021d4 <__udivmoddi4+0x29c>
  4021be:	ebba 030e 	subs.w	r3, sl, lr
  4021c2:	eb64 0405 	sbc.w	r4, r4, r5
  4021c6:	fa04 f707 	lsl.w	r7, r4, r7
  4021ca:	40cb      	lsrs	r3, r1
  4021cc:	431f      	orrs	r7, r3
  4021ce:	40cc      	lsrs	r4, r1
  4021d0:	6037      	str	r7, [r6, #0]
  4021d2:	6074      	str	r4, [r6, #4]
  4021d4:	2100      	movs	r1, #0
  4021d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4021da:	4618      	mov	r0, r3
  4021dc:	e6f8      	b.n	401fd0 <__udivmoddi4+0x98>
  4021de:	4690      	mov	r8, r2
  4021e0:	e6e0      	b.n	401fa4 <__udivmoddi4+0x6c>
  4021e2:	45c2      	cmp	sl, r8
  4021e4:	d2ea      	bcs.n	4021bc <__udivmoddi4+0x284>
  4021e6:	ebb8 0e02 	subs.w	lr, r8, r2
  4021ea:	eb69 0503 	sbc.w	r5, r9, r3
  4021ee:	3801      	subs	r0, #1
  4021f0:	e7e4      	b.n	4021bc <__udivmoddi4+0x284>
  4021f2:	4628      	mov	r0, r5
  4021f4:	e7d7      	b.n	4021a6 <__udivmoddi4+0x26e>
  4021f6:	4640      	mov	r0, r8
  4021f8:	e791      	b.n	40211e <__udivmoddi4+0x1e6>
  4021fa:	4681      	mov	r9, r0
  4021fc:	e7be      	b.n	40217c <__udivmoddi4+0x244>
  4021fe:	4601      	mov	r1, r0
  402200:	e778      	b.n	4020f4 <__udivmoddi4+0x1bc>
  402202:	3802      	subs	r0, #2
  402204:	443c      	add	r4, r7
  402206:	e745      	b.n	402094 <__udivmoddi4+0x15c>
  402208:	4608      	mov	r0, r1
  40220a:	e708      	b.n	40201e <__udivmoddi4+0xe6>
  40220c:	f1a8 0802 	sub.w	r8, r8, #2
  402210:	443d      	add	r5, r7
  402212:	e72b      	b.n	40206c <__udivmoddi4+0x134>

00402214 <__aeabi_idiv0>:
  402214:	4770      	bx	lr
  402216:	bf00      	nop

00402218 <__libc_init_array>:
  402218:	b570      	push	{r4, r5, r6, lr}
  40221a:	4e0f      	ldr	r6, [pc, #60]	; (402258 <__libc_init_array+0x40>)
  40221c:	4d0f      	ldr	r5, [pc, #60]	; (40225c <__libc_init_array+0x44>)
  40221e:	1b76      	subs	r6, r6, r5
  402220:	10b6      	asrs	r6, r6, #2
  402222:	bf18      	it	ne
  402224:	2400      	movne	r4, #0
  402226:	d005      	beq.n	402234 <__libc_init_array+0x1c>
  402228:	3401      	adds	r4, #1
  40222a:	f855 3b04 	ldr.w	r3, [r5], #4
  40222e:	4798      	blx	r3
  402230:	42a6      	cmp	r6, r4
  402232:	d1f9      	bne.n	402228 <__libc_init_array+0x10>
  402234:	4e0a      	ldr	r6, [pc, #40]	; (402260 <__libc_init_array+0x48>)
  402236:	4d0b      	ldr	r5, [pc, #44]	; (402264 <__libc_init_array+0x4c>)
  402238:	1b76      	subs	r6, r6, r5
  40223a:	f000 fddf 	bl	402dfc <_init>
  40223e:	10b6      	asrs	r6, r6, #2
  402240:	bf18      	it	ne
  402242:	2400      	movne	r4, #0
  402244:	d006      	beq.n	402254 <__libc_init_array+0x3c>
  402246:	3401      	adds	r4, #1
  402248:	f855 3b04 	ldr.w	r3, [r5], #4
  40224c:	4798      	blx	r3
  40224e:	42a6      	cmp	r6, r4
  402250:	d1f9      	bne.n	402246 <__libc_init_array+0x2e>
  402252:	bd70      	pop	{r4, r5, r6, pc}
  402254:	bd70      	pop	{r4, r5, r6, pc}
  402256:	bf00      	nop
  402258:	00402e08 	.word	0x00402e08
  40225c:	00402e08 	.word	0x00402e08
  402260:	00402e10 	.word	0x00402e10
  402264:	00402e08 	.word	0x00402e08

00402268 <register_fini>:
  402268:	4b02      	ldr	r3, [pc, #8]	; (402274 <register_fini+0xc>)
  40226a:	b113      	cbz	r3, 402272 <register_fini+0xa>
  40226c:	4802      	ldr	r0, [pc, #8]	; (402278 <register_fini+0x10>)
  40226e:	f000 b805 	b.w	40227c <atexit>
  402272:	4770      	bx	lr
  402274:	00000000 	.word	0x00000000
  402278:	00402289 	.word	0x00402289

0040227c <atexit>:
  40227c:	2300      	movs	r3, #0
  40227e:	4601      	mov	r1, r0
  402280:	461a      	mov	r2, r3
  402282:	4618      	mov	r0, r3
  402284:	f000 b81e 	b.w	4022c4 <__register_exitproc>

00402288 <__libc_fini_array>:
  402288:	b538      	push	{r3, r4, r5, lr}
  40228a:	4c0a      	ldr	r4, [pc, #40]	; (4022b4 <__libc_fini_array+0x2c>)
  40228c:	4d0a      	ldr	r5, [pc, #40]	; (4022b8 <__libc_fini_array+0x30>)
  40228e:	1b64      	subs	r4, r4, r5
  402290:	10a4      	asrs	r4, r4, #2
  402292:	d00a      	beq.n	4022aa <__libc_fini_array+0x22>
  402294:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402298:	3b01      	subs	r3, #1
  40229a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40229e:	3c01      	subs	r4, #1
  4022a0:	f855 3904 	ldr.w	r3, [r5], #-4
  4022a4:	4798      	blx	r3
  4022a6:	2c00      	cmp	r4, #0
  4022a8:	d1f9      	bne.n	40229e <__libc_fini_array+0x16>
  4022aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4022ae:	f000 bdaf 	b.w	402e10 <_fini>
  4022b2:	bf00      	nop
  4022b4:	00402e20 	.word	0x00402e20
  4022b8:	00402e1c 	.word	0x00402e1c

004022bc <__retarget_lock_acquire_recursive>:
  4022bc:	4770      	bx	lr
  4022be:	bf00      	nop

004022c0 <__retarget_lock_release_recursive>:
  4022c0:	4770      	bx	lr
  4022c2:	bf00      	nop

004022c4 <__register_exitproc>:
  4022c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4022c8:	4d2c      	ldr	r5, [pc, #176]	; (40237c <__register_exitproc+0xb8>)
  4022ca:	4606      	mov	r6, r0
  4022cc:	6828      	ldr	r0, [r5, #0]
  4022ce:	4698      	mov	r8, r3
  4022d0:	460f      	mov	r7, r1
  4022d2:	4691      	mov	r9, r2
  4022d4:	f7ff fff2 	bl	4022bc <__retarget_lock_acquire_recursive>
  4022d8:	4b29      	ldr	r3, [pc, #164]	; (402380 <__register_exitproc+0xbc>)
  4022da:	681c      	ldr	r4, [r3, #0]
  4022dc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4022e0:	2b00      	cmp	r3, #0
  4022e2:	d03e      	beq.n	402362 <__register_exitproc+0x9e>
  4022e4:	685a      	ldr	r2, [r3, #4]
  4022e6:	2a1f      	cmp	r2, #31
  4022e8:	dc1c      	bgt.n	402324 <__register_exitproc+0x60>
  4022ea:	f102 0e01 	add.w	lr, r2, #1
  4022ee:	b176      	cbz	r6, 40230e <__register_exitproc+0x4a>
  4022f0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4022f4:	2401      	movs	r4, #1
  4022f6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4022fa:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4022fe:	4094      	lsls	r4, r2
  402300:	4320      	orrs	r0, r4
  402302:	2e02      	cmp	r6, #2
  402304:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  402308:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40230c:	d023      	beq.n	402356 <__register_exitproc+0x92>
  40230e:	3202      	adds	r2, #2
  402310:	f8c3 e004 	str.w	lr, [r3, #4]
  402314:	6828      	ldr	r0, [r5, #0]
  402316:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40231a:	f7ff ffd1 	bl	4022c0 <__retarget_lock_release_recursive>
  40231e:	2000      	movs	r0, #0
  402320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402324:	4b17      	ldr	r3, [pc, #92]	; (402384 <__register_exitproc+0xc0>)
  402326:	b30b      	cbz	r3, 40236c <__register_exitproc+0xa8>
  402328:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40232c:	f3af 8000 	nop.w
  402330:	4603      	mov	r3, r0
  402332:	b1d8      	cbz	r0, 40236c <__register_exitproc+0xa8>
  402334:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  402338:	6002      	str	r2, [r0, #0]
  40233a:	2100      	movs	r1, #0
  40233c:	6041      	str	r1, [r0, #4]
  40233e:	460a      	mov	r2, r1
  402340:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402344:	f04f 0e01 	mov.w	lr, #1
  402348:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40234c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  402350:	2e00      	cmp	r6, #0
  402352:	d0dc      	beq.n	40230e <__register_exitproc+0x4a>
  402354:	e7cc      	b.n	4022f0 <__register_exitproc+0x2c>
  402356:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40235a:	430c      	orrs	r4, r1
  40235c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  402360:	e7d5      	b.n	40230e <__register_exitproc+0x4a>
  402362:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  402366:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40236a:	e7bb      	b.n	4022e4 <__register_exitproc+0x20>
  40236c:	6828      	ldr	r0, [r5, #0]
  40236e:	f7ff ffa7 	bl	4022c0 <__retarget_lock_release_recursive>
  402372:	f04f 30ff 	mov.w	r0, #4294967295
  402376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40237a:	bf00      	nop
  40237c:	20400448 	.word	0x20400448
  402380:	00402df8 	.word	0x00402df8
  402384:	00000000 	.word	0x00000000

00402388 <sysfont_glyphs>:
	...
  4023a8:	00300030 00300030 00300030 00300000     0.0.0.0.0.0...0.
  4023b8:	00000030 00000000 00000000 006c006c     0...........l.l.
  4023c8:	006c006c 00000000 00000000 00000000     l.l.............
	...
  4023e0:	00280000 007c0028 00280028 0028007c     ..(.(.|.(.(.|.(.
  4023f0:	00000028 00000000 00000000 003c0010     (.............<.
  402400:	00200040 00080010 00780004 00000010     @. .......x.....
	...
  402418:	007c0000 00a800a4 00280050 00940054     ..|.....P.(.T...
  402428:	00000088 00000000 00000000 00900060     ............`...
  402438:	00900090 00940060 00880088 00000070     ....`.......p...
	...
  402450:	00100010 00000010 00000000 00000000     ................
	...
  40246c:	00100008 00200020 00200020 00200020     .... . . . . . .
  40247c:	00080010 00000000 00000000 00100020     ............ ...
  40248c:	00080008 00080008 00080008 00200010     .............. .
  40249c:	00000000 00280000 007c0010 00280010     ......(...|...(.
	...
  4024c4:	00100010 00fe0010 00100010 00000010     ................
	...
  4024ec:	00300010 00000020 00000000 00000000     ..0. ...........
  4024fc:	00000000 007c0000 00000000 00000000     ......|.........
	...
  402520:	00300000 00000030 00000000 00000000     ..0.0...........
  402530:	00080000 00100008 00200010 00400020     .......... . .@.
  402540:	00000040 00000000 00000000 00780000     @.............x.
  402550:	008c0084 00a40094 008400c4 00000078     ............x...
	...
  402568:	00100000 00500030 00100010 00100010     ....0.P.........
  402578:	0000007c 00000000 00000000 00700000     |.............p.
  402588:	00080088 00200010 00800040 000000f8     ...... .@.......
	...
  4025a0:	00700000 00080088 00080030 00880008     ..p.....0.......
  4025b0:	00000070 00000000 00000000 00080000     p...............
  4025c0:	00280018 00880048 000800fc 00000008     ..(.H...........
	...
  4025d8:	00780000 00800080 000800f0 00080008     ..x.............
  4025e8:	000000f0 00000000 00000000 00300000     ..............0.
  4025f8:	00800040 008800f0 00880088 00000070     @...........p...
	...
  402610:	00f80000 00100008 00200010 00400020     .......... . .@.
  402620:	00000040 00000000 00000000 00700000     @.............p.
  402630:	00880088 00880070 00880088 00000070     ....p.......p...
	...
  402648:	00700000 00880088 00780088 00100008     ..p.......x.....
  402658:	00000060 00000000 00000000 00000000     `...............
  402668:	00300000 00000030 00300000 00000030     ..0.0.....0.0...
	...
  402684:	00300000 00000030 00300000 00600030     ..0.0.....0.0.`.
  402694:	00000040 00000000 00000000 00100008     @...............
  4026a4:	00400020 00100020 00000008 00000000      .@. ...........
	...
  4026c0:	0000007c 0000007c 00000000 00000000     |...|...........
	...
  4026d8:	00200040 00080010 00200010 00000040     @. ....... .@...
	...
  4026f0:	00300000 00080048 00200010 00000000     ..0.H..... .....
  402700:	00000020 00000000 00000000 00000000      ...............
  402710:	0042003c 00aa009a 00be00aa 00780080     <.B...........x.
	...
  402728:	00100000 00280028 007c0044 00440044     ....(.(.D.|.D.D.
  402738:	00000044 00000000 00000000 00f80000     D...............
  402748:	00840084 008400f8 00840084 000000f8     ................
	...
  402760:	003c0000 00800040 00800080 00400080     ..<.@.........@.
  402770:	0000003c 00000000 00000000 00f00000     <...............
  402780:	00840088 00840084 00880084 000000f0     ................
	...
  402798:	00f80000 00800080 008000f0 00800080     ................
  4027a8:	000000f8 00000000 00000000 00f80000     ................
  4027b8:	00800080 008000f8 00800080 00000080     ................
	...
  4027d0:	003c0000 00800040 009c0080 00440084     ..<.@.........D.
  4027e0:	00000038 00000000 00000000 00880000     8...............
  4027f0:	00880088 008800f8 00880088 00000088     ................
	...
  402808:	00f80000 00200020 00200020 00200020     .... . . . . . .
  402818:	000000f8 00000000 00000000 00f80000     ................
  402828:	00080008 00080008 00080008 000000f0     ................
	...
  402840:	00840000 00900088 00d000a0 00840088     ................
  402850:	00000084 00000000 00000000 00800000     ................
  402860:	00800080 00800080 00800080 000000fc     ................
	...
  402878:	00840000 00cc00cc 00b400b4 00840084     ................
  402888:	00000084 00000000 00000000 00840000     ................
  402898:	00c400c4 00a400a4 00940094 0000008c     ................
	...
  4028b0:	00780000 00840084 00840084 00840084     ..x.............
  4028c0:	00000078 00000000 00000000 00f80000     x...............
  4028d0:	00840084 00f80084 00800080 00000080     ................
	...
  4028e8:	00780000 00840084 00840084 00840084     ..x.............
  4028f8:	00200078 00000018 00000000 00f80000     x. .............
  402908:	00840084 00f80084 00840088 00000084     ................
	...
  402920:	007c0000 00800080 00180060 00040004     ..|.....`.......
  402930:	000000f8 00000000 00000000 00f80000     ................
  402940:	00200020 00200020 00200020 00000020      . . . . . . ...
	...
  402958:	00840000 00840084 00840084 00840084     ................
  402968:	00000078 00000000 00000000 00840000     x...............
  402978:	00840084 00480048 00300048 00000030     ....H.H.H.0.0...
	...
  402990:	00880000 00a800a8 00a800a8 005000a8     ..............P.
  4029a0:	00000050 00000000 00000000 00880000     P...............
  4029b0:	00500088 00200020 00880050 00000088     ..P. . .P.......
	...
  4029c8:	00880000 00880088 00500050 00200020     ........P.P. . .
  4029d8:	00000020 00000000 00000000 00fc0000      ...............
  4029e8:	00080004 00200010 00800040 000000fc     ...... .@.......
	...
  402a00:	00400070 00400040 00400040 00400040     p.@.@.@.@.@.@.@.
  402a10:	00400040 00000070 00000000 00400040     @.@.p.......@.@.
  402a20:	00200020 00100020 00100010 00080008      . . ...........
	...
  402a38:	00080038 00080008 00080008 00080008     8...............
  402a48:	00080008 00000038 00000000 00280010     ....8.........(.
  402a58:	00000044 00000000 00000000 00000000     D...............
	...
  402a80:	00000038 00000000 00000000 00200000     8............. .
  402a90:	00000010 00000000 00000000 00000000     ................
	...
  402aac:	00700000 00080008 00880078 0000007c     ..p.....x...|...
	...
  402ac4:	00800080 00f80080 00840084 00840084     ................
  402ad4:	000000f8 00000000 00000000 00000000     ................
  402ae4:	00780000 00800080 00800080 00000078     ..x.........x...
	...
  402afc:	00040004 007c0004 00840084 008c0084     ......|.........
  402b0c:	00000074 00000000 00000000 00000000     t...............
  402b1c:	00780000 00fc0084 00800080 0000007c     ..x.........|...
	...
  402b34:	0020001c 00fc0020 00200020 00200020     .. . ... . . . .
  402b44:	000000fc 00000000 00000000 00000000     ................
  402b54:	007c0000 00840084 00840084 0004007c     ..|.........|...
  402b64:	00000078 00000000 00800080 00b80080     x...............
  402b74:	008400c4 00840084 00000084 00000000     ................
  402b84:	00000000 00100000 00700000 00100010     ..........p.....
  402b94:	00100010 0000007c 00000000 00000000     ....|...........
  402ba4:	00080000 00780000 00080008 00080008     ......x.........
  402bb4:	00080008 00700008 00000000 00800080     ......p.........
  402bc4:	00880080 00a00090 008800d0 00000088     ................
	...
  402bdc:	002000e0 00200020 00200020 00200020     .. . . . . . . .
  402bec:	000000f8 00000000 00000000 00000000     ................
  402bfc:	00a40000 00a400fc 00a400a4 000000a4     ................
	...
  402c18:	00b80000 008400c4 00840084 00000084     ................
	...
  402c34:	00780000 00840084 00840084 00000078     ..x.........x...
	...
  402c50:	00b80000 008400c4 00840084 008000f8     ................
  402c60:	00000080 00000000 00000000 007c0000     ..............|.
  402c70:	00840084 00840084 0004007c 00000004     ........|.......
	...
  402c88:	00d80000 00400060 00400040 000000f0     ....`.@.@.@.....
	...
  402ca4:	00780000 00400080 00080030 000000f0     ..x...@.0.......
	...
  402cc0:	00fc0020 00200020 00200020 0000001c      ... . . . .....
	...
  402cdc:	00880000 00880088 00880088 0000007c     ............|...
	...
  402cf8:	00840000 00840084 00480048 00000030     ........H.H.0...
	...
  402d14:	00880000 00a800a8 00a800a8 00000050     ............P...
	...
  402d30:	00880000 00200050 00500020 00000088     ....P. . .P.....
	...
  402d4c:	00840000 00480084 00300048 00200010     ......H.H.0... .
  402d5c:	00000040 00000000 00000000 00f80000     @...............
  402d6c:	00100008 00400020 000000f8 00000000     .... .@.........
  402d7c:	00000000 00200010 00100020 00200020     ...... . ... . .
  402d8c:	00200010 00100020 00000000 00000000     .. . ...........
  402d9c:	00100010 00100010 00000000 00100010     ................
  402dac:	00100010 00000000 00000000 00100020     ............ ...
  402dbc:	00200010 00100010 00100020 00200010     .. ..... ..... .
  402dcc:	00000000 000007e2 00000003 00000013     ................
  402ddc:	0000000c 0000000f 0000002d 00000001     ........-.......
  402dec:	20202035 20203031 00003120              5   10   1..

00402df8 <_global_impure_ptr>:
  402df8:	20400020                                 .@ 

00402dfc <_init>:
  402dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402dfe:	bf00      	nop
  402e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402e02:	bc08      	pop	{r3}
  402e04:	469e      	mov	lr, r3
  402e06:	4770      	bx	lr

00402e08 <__init_array_start>:
  402e08:	00402269 	.word	0x00402269

00402e0c <__frame_dummy_init_array_entry>:
  402e0c:	00400165                                e.@.

00402e10 <_fini>:
  402e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402e12:	bf00      	nop
  402e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402e16:	bc08      	pop	{r3}
  402e18:	469e      	mov	lr, r3
  402e1a:	4770      	bx	lr

00402e1c <__fini_array_start>:
  402e1c:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 2388 0040 0e0a 7d20               .....#@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <__atexit_recursive_mutex>:
20400448:	06f8 2040                                   ..@ 
